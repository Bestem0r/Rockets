{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["engine","render","monday","mondaySdk","completedIDs","Engine","Matter","Render","World","Bodies","Events","MouseConstraint","Mouse","crates","particleColors","getComputedStyle","document","documentElement","getPropertyValue","getRandomInt","min","max","Math","ceil","floor","random","App","props","getContext","res","setState","context","data","loadCompletedItems","getSettings","isNaN","parseInt","countdown","console","log","settings","completed_state","i","state","boardIds","api","variables","completedState","boardID","then","clearCrates","items_by_column_values","createBox","name","length","id","info_text","setupMatterJS","create","element","refs","launch_site","options","wireframes","background","width","window","innerWidth","height","innerHeight","ground","rectangle","isStatic","fillStyle","mouse","canvas","mouseConstraint","constraint","stiffness","visible","add","world","run","on","mousePosition","position","cratesUnderMouse","Query","point","x","y","label","getElementById","crate","innerHTML","style","top","clientHeight","left","clientWidth","opacity","prepareLaunch","execute","message","confirmButton","cancelButton","excludeCancelButton","confirm","deleteCompleted","launchButton","display","classList","count","setTimeout","remove","launch","type","timeout","rocket","animation","bottom","createParticle","reset","particle","createElement","size","color","borderRadius","backgroundColor","destinationX","round","destinationY","appendChild","animate","transform","duration","easing","delay","onfinish","itemID","button_text","this","listen","className","ref","onClick","src","alt","sprite","texture","xScale","yScale","React","Component","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0c8e6197.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\n\nconst monday = mondaySdk();\nvar completedIDs = [];\n\n// module aliases\nvar Engine = Matter.Engine,\nRender = Matter.Render,\nWorld = Matter.World,\nBodies = Matter.Bodies,\nEvents = Matter.Events,\nMouseConstraint = Matter.MouseConstraint,\nMouse = Matter.Mouse;\n\nvar engine,\nrender;\nvar crates = [];\n\nconst particleColors = [\n    getComputedStyle(document.documentElement).getPropertyValue(\"--particle_1\"),\n    getComputedStyle(document.documentElement).getPropertyValue(\"--particle_2\"),\n    getComputedStyle(document.documentElement).getPropertyValue(\"--particle_3\"),\n    getComputedStyle(document.documentElement).getPropertyValue(\"--particle_4\")\n];\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        // Default state\n        this.state = { info_text: \"\", button_text: \"Launch Now!\", settings: { completed_state: \"Done\", countdown: 10 }, };\n    }\n\n    componentDidMount() {\n        this.setupMatterJS();\n\n        //Load boards listener\n        monday.listen(\"context\", this.getContext)\n\n        // Settings changed listener\n        monday.listen(\"settings\", this.getSettings);\n    }\n\n    render() {\n        return <div className=\"App\" ref=\"launch_site\">\n            <div className=\"button_container\">\n                <p className=\"launch_title\" id=\"title\">{this.state.info_text}</p>\n                <button id=\"launchButton\" onClick={this.prepareLaunch} className=\"launch_button\">{this.state.button_text}</button>\n            </div>\n            <img src=\"sprites/mocket.png\" alt=\"Rocket Stationed\" id=\"rocketStationed\" className=\"rocket_stationed\"></img>\n            <p id=\"hover_label\">Hover</p>\n            <div className=\"particle_container\" id=\"particleContainer\"></div>\n            <img alt=\"Rocket\" className=\"rocket\" id=\"rocket\" src=\"sprites/mocket.png\"></img>\n        </div>;\n    }\n\n    getContext = (res) => {\n        this.setState({context: res.data});\n        this.loadCompletedItems();\n    }\n\n    getSettings = (res) => {\n        if (!(isNaN(parseInt(res.data.countdown)))) {\n            console.log(\"Setting countdown to: \" + parseInt(res.data.countdown));\n            this.setState({ settings: { countdown: parseInt(res.data.countdown) }})\n        }\n        if (res.data.completed_state !== \"\") {\n            this.setState({ settings: { completed_state: res.data.completed_state } });\n            this.loadCompletedItems();\n        }\n    }\n\n    loadCompletedItems = () => {\n        for (var i in this.state.context.boardIds) {\n            monday.api(`query ($completedState: String!, $boardID: Int!) { items_by_column_values (board_id: $boardID, column_id: \"status\", column_value: $completedState) { name id } }`, {\n                    variables: {completedState: this.state.settings.completed_state, boardID: this.state.context.boardIds[i]}\n                })\n                .then(res => {\n                    this.clearCrates();\n                    for (var i in res.data.items_by_column_values) {\n                        this.createBox(res.data.items_by_column_values[i].name);\n                        completedIDs[completedIDs.length] = res.data.items_by_column_values[i].id;\n                    }\n                    this.setState({info_text: completedIDs.length + \" items ready to launch\"})\n            });\n        }\n    }\n\n    createBox(name) {\n        let x = getRandomInt(400, 800);\n        let y = getRandomInt(50, 400);\n        let size = getRandomInt(50, 70);\n\n        let crate = Bodies.rectangle(x, y, size, size, {\n            render: {\n                sprite: {\n                    texture: \"/sprites/crate.png\",\n                    xScale: size / 475,\n                    yScale: size / 475 } },\n            label: name\n        });\n            \n        World.add(engine.world, [crate]);\n        crates[crates.length] = crate;\n    }\n\n    setupMatterJS = () => {\n        engine = Engine.create();\n\n        // create a renderer\n        render = Render.create({\n            element: this.refs.launch_site,\n            engine: engine,\n            options: {\n                wireframes: false,\n                background: '#fff',\n                width: window.innerWidth,\n                height: window.innerHeight - 100\n            }\n        });\n\n        var ground = Bodies.rectangle(window.innerWidth / 2 - 250, window.innerHeight - 100, window.innerWidth + 500, 20, { \n            isStatic: true,\n            render: { fillStyle: '#fff' }\n        });\n\n        var mouse = Mouse.create(render.canvas),\n        mouseConstraint = MouseConstraint.create(engine, {\n            mouse: mouse,\n            constraint: {\n                stiffness: 0.2,\n                render: { visible: false }\n            }\n        });\n\n        World.add(engine.world, [ground, mouseConstraint]);\n        Engine.run(engine);\n        Render.run(render);\n        \n        Events.on(engine, 'tick', () => {\n            var mousePosition = mouse.position;\n            var cratesUnderMouse = Matter.Query.point(crates, {x: mousePosition.x, y: mousePosition.y});\n            \n            const label = document.getElementById(\"hover_label\");\n            if (cratesUnderMouse.length > 0) {\n                let crate = cratesUnderMouse[0];\n                label.innerHTML = crate.label;\n                label.style.top = crate.position.y - 1 - label.clientHeight + \"px\";\n                label.style.left = crate.position.x - (label.clientWidth + 1) / 2 + \"px\";\n                label.style.opacity = 1;\n            } else {\n                label.style.opacity = 0;\n            }\n        });\n    }\n\n    prepareLaunch = () => {\n        if (completedIDs.length === 0) {\n            monday.execute(\"notice\", {\n                type: \"error\",\n                message: \"Rocket can't be launched without any items!\",\n                timeout: 2000\n            });\n            return;\n        }\n        monday.execute(\"confirm\", {\n            message: \"Are you sure?\\n This will launch all completed items off the earth's atmosphere to the archive!\", \n            confirmButton: \"Launch!\", \n            cancelButton: \"Cancel\", \n            excludeCancelButton: false\n         }).then((res) => {\n\n             if (res.data.confirm) {\n                this.deleteCompleted();\n                this.clearCrates();\n                var launchButton = document.getElementById(\"launchButton\");\n                document.getElementById(\"rocketStationed\").style.display = \"none\";\n\n                launchButton.classList.add(\"countdown\");\n                document.getElementById(\"rocket\").style.display = \"block\";\n                this.setState({info_text: \"Rocket launching in...\"})\n\n                var count = parseInt(this.state.settings.countdown);\n                launchButton.innerHTML = count;\n                for (var i = 1; i <= parseInt(this.state.settings.countdown); i ++) {\n                    setTimeout(() => {\n                        count --;\n                        launchButton.innerHTML = count;\n                        launchButton.classList.add(\"big\");\n                        setTimeout( () => { launchButton.classList.remove(\"big\")}, 170);\n                        if (count === 0) { this.launch(); }\n                    }, i * 1000);\n                }\n        \n             }\n         });\n    }\n\n    launch = () => {\n        var rocket = document.getElementById(\"rocket\");\n        rocket.style.animation = \"shake 0.3s 10\";\n        rocket.style.bottom = window.innerHeight + 20 + \"px\";\n        document.getElementById(\"particleContainer\").style.display = \"block\";\n    \n        for (let i = 0; i < window.innerHeight * 1.2; i += window.innerHeight / 50) {\n            setTimeout(() => {\n                var x = window.innerWidth / 2;\n                var y = window.innerHeight - i;\n                this.createParticle(x, y);\n            }, i * 2.2);\n        }\n        setTimeout( () => {\n            monday.execute(\"notice\", { \n                message: \"Rocket successfully launched! Items are now archived!\",\n                type: \"success\",\n                timeout: 2000,\n             });\n             setTimeout( () => { this.reset() }, 1500);\n        }, 2000);\n    }\n\n    reset = () => {\n        this.loadCompletedItems();\n        var launchButton = document.getElementById(\"launchButton\");\n        var rocket = document.getElementById(\"rocket\");\n        launchButton.classList.remove(\"countdown\");\n        launchButton.innerHTML = \"Launch now!\"\n        rocket.style.bottom = \"10%\";\n        rocket.style.display = \"none\";\n        rocket.style.animation = \"\";\n        document.getElementById(\"particleContainer\").style.display = \"none\";\n        document.getElementById(\"rocketStationed\").style.display = \"block\";\n        this.setState({info_text: \"0 items ready to launch!\"})\n    }\n\n    createParticle = (x, y) => {\n        let particle = document.createElement(\"div\");\n        particle.classList.add(\"particle\");\n    \n        let size = (Math.random() + 4) * 5;\n        let color = particleColors[getRandomInt(0, particleColors.length - 1)];\n    \n        particle.style.width = size + \"px\";\n        particle.style.height = size + \"px\";\n        particle.style.borderRadius = size + \"px\";\n        particle.style.backgroundColor = color;\n    \n        let destinationX = x + Math.ceil(Math.random() * 150) * (Math.round(Math.random()) ? 1 : - 1)\n        let destinationY = y + ((Math.random() + 15) * 10);\n    \n        document.getElementById(\"particleContainer\").appendChild(particle);\n        let animation = particle.animate(\n            [{\n                    transform: \"translate(-50%, -50%) translate(\" + x + \"px, \" + y + \"px) scale(1, 1)\",\n                    opacity: 1,\n                },{\n                    transform: \"translate(\" + destinationX + \"px,\" + destinationY + \"px) scale(2, 2)\",\n                    opacity: 1,\n                },],\n                {\n                duration: Math.random() * 1000 + 1000,\n                easing: \"cubic-bezier(.05,.58,.33,1)\",\n                delay: Math.random() * 200,\n            }\n        );\n        animation.onfinish = () => {particle.remove(); };\n    }\n        \n    deleteCompleted = () => {\n        for (let i in completedIDs) {\n            let itemID = parseInt(completedIDs[i]);\n            monday.api(`mutation ($itemID: Int) { archive_item (item_id: $itemID) { id } }`, {\n                variables: {itemID: itemID } }\n            );\n        }\n    }\n    \n    clearCrates = () => {\n        for (let i in crates) { World.remove(engine.world, crates[i]) }\n        crates = [];\n        completedIDs = [];\n    }\n}\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}