{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vebj\\xF8rn\\\\Documents\\\\Monday\\\\quickstart-react\\\\src\\\\App.js\";\nimport React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\nimport Rocket from './Rocket';\nconst monday = mondaySdk();\nvar completedIDs = []; // module aliases\n\nvar Engine = Matter.Engine,\n    Render = Matter.Render,\n    World = Matter.World,\n    Bodies = Matter.Bodies,\n    Events = Matter.Events,\n    MouseConstraint = Matter.MouseConstraint,\n    Mouse = Matter.Mouse;\nvar engine, render;\nvar crates = [];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.getContext = res => {\n      this.setState({\n        context: res.data\n      });\n      this.loadCompletedItems();\n    };\n\n    this.getSettings = res => {\n      this.setState({\n        settings: res.data\n      });\n      this.loadCompletedItems();\n    };\n\n    this.loadCompletedItems = () => {\n      for (let i in this.state.context.boardIds) {\n        monday.api(`query ($completedState: String!, $boardID: Int!) { items_by_column_values (board_id: $boardID, column_id: \"status\", column_value: $completedState) { name id } }`, {\n          variables: {\n            completedState: this.state.settings.completed_state,\n            boardID: this.state.context.boardIds[i]\n          }\n        }).then(res => {\n          clearCrates();\n\n          for (let i in res.data.items_by_column_values) {\n            this.createBox(res.data.items_by_column_values[i].name);\n            completedIDs[completedIDs.length] = res.data.items_by_column_values[i].id;\n          }\n\n          this.setState({\n            completed_amount: completedIDs.length\n          });\n        });\n      }\n    };\n\n    this.setupMatterJS = () => {\n      engine = Engine.create(); // create a renderer\n\n      render = Render.create({\n        element: this.refs.launch_site,\n        engine: engine,\n        options: {\n          wireframes: false,\n          background: '#fff',\n          width: window.innerWidth,\n          height: window.innerHeight - 100\n        }\n      });\n      render.options.wireframes = false;\n      var ground = Bodies.rectangle(window.innerWidth / 2 - 250, window.innerHeight - 100, window.innerWidth + 500, 20, {\n        isStatic: true,\n        render: {\n          fillStyle: '#fff'\n        }\n      });\n      var mouse = Mouse.create(render.canvas),\n          mouseConstraint = MouseConstraint.create(engine, {\n        mouse: mouse,\n        constraint: {\n          stiffness: 0.2,\n          render: {\n            visible: false\n          }\n        }\n      });\n      World.add(engine.world, [ground, mouseConstraint]);\n      Engine.run(engine);\n      Render.run(render);\n      Events.on(engine, 'tick', () => {\n        var mousePosition = mouse.position;\n        var cratesUnderMouse = Matter.Query.point(crates, {\n          x: mousePosition.x,\n          y: mousePosition.y\n        });\n        const label = document.getElementById(\"hover_label\");\n\n        if (cratesUnderMouse.length > 0) {\n          let crate = cratesUnderMouse[0];\n          label.innerHTML = crate.id;\n          let labelHeight = label.clientHeight + 1;\n          let labelWidth = label.clientWidth + 1;\n          label.style.top = crate.position.y - 2 - labelHeight + \"px\";\n          label.style.left = crate.position.x - labelWidth / 2 + \"px\";\n          label.style.opacity = 1;\n        } else {\n          label.style.opacity = 0;\n        }\n      });\n    };\n\n    this.state = {\n      completed_amount: 0,\n      button_text: \"Launch Now!\",\n      settings: {\n        completed_state: \"Done\"\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.setupMatterJS(); //Load boards listener\n\n    monday.listen(\"context\", this.getContext); // Settings changed listener\n\n    monday.listen(\"settings\", this.getSettings);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      ref: \"launch_site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"hover_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, \"Hover\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"launchDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"launchTitle\",\n      id: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, this.state.completed_amount, \" items ready to launch!\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: launch,\n      className: \"launchButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }, this.state.button_text)));\n  }\n  /** Creates a new box/crate */\n\n\n  createBox(name) {\n    let x = getRandomInt(200, 800);\n    let y = getRandomInt(50, 400);\n    let size = getRandomInt(50, 70);\n    let spriteNumber = getRandomInt(1, 8);\n    let crate = Bodies.rectangle(x, y, size, size, {\n      render: {\n        sprite: {\n          texture: \"/sprites/crates/crate_\" + spriteNumber + \".png\",\n          xScale: size / 475,\n          yScale: size / 475\n        }\n      },\n      id: name\n    });\n    World.add(engine.world, [crate]);\n    crates[crates.length] = crate;\n  }\n\n}\n\nfunction launch() {\n  monday.execute(\"confirm\", {\n    message: \"Are you sure? This will launch all completed items off the earth's atmosphere and they will be gone forever!\",\n    confirmButton: \"Launch!\",\n    cancelButton: \"Cancel\",\n    excludeCancelButton: false\n  }).then(res => {\n    if (res.data.confirm) {\n      deleteCompleted();\n    }\n  });\n}\n\nfunction deleteCompleted() {\n  for (let i in completedIDs) {\n    let itemID = parseInt(completedIDs[i]);\n    monday.api(`mutation ($itemID: Int) { delete_item (item_id: $itemID) { id } }`, {\n      variables: {\n        itemID: itemID\n      }\n    });\n  }\n\n  clearCrates();\n}\n\nfunction clearCrates() {\n  for (let i in crates) {\n    World.remove(engine.world, crates[i]);\n  }\n\n  crates = [];\n  completedIDs = [];\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Vebj√∏rn/Documents/Monday/quickstart-react/src/App.js"],"names":["React","createElement","mondaySdk","Matter","Rocket","monday","completedIDs","Engine","Render","World","Bodies","Events","MouseConstraint","Mouse","engine","render","crates","App","Component","constructor","props","getContext","res","setState","context","data","loadCompletedItems","getSettings","settings","i","state","boardIds","api","variables","completedState","completed_state","boardID","then","clearCrates","items_by_column_values","createBox","name","length","id","completed_amount","setupMatterJS","create","element","refs","launch_site","options","wireframes","background","width","window","innerWidth","height","innerHeight","ground","rectangle","isStatic","fillStyle","mouse","canvas","mouseConstraint","constraint","stiffness","visible","add","world","run","on","mousePosition","position","cratesUnderMouse","Query","point","x","y","label","document","getElementById","crate","innerHTML","labelHeight","clientHeight","labelWidth","clientWidth","style","top","left","opacity","button_text","componentDidMount","listen","launch","getRandomInt","size","spriteNumber","sprite","texture","xScale","yScale","execute","message","confirmButton","cancelButton","excludeCancelButton","confirm","deleteCompleted","itemID","parseInt","remove","min","max","Math","ceil","floor","random"],"mappings":"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","sourcesContent":["import React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\nimport Rocket from './Rocket'\n\nconst monday = mondaySdk();\nvar completedIDs = [];\n\n// module aliases\nvar Engine = Matter.Engine,\nRender = Matter.Render,\nWorld = Matter.World,\nBodies = Matter.Bodies,\nEvents = Matter.Events,\nMouseConstraint = Matter.MouseConstraint,\nMouse = Matter.Mouse;\n\nvar engine,\nrender;\n\nvar crates = [];\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Default state\n        this.state = {\n            completed_amount: 0,\n            button_text: \"Launch Now!\",\n            settings: {\n                completed_state: \"Done\"\n            },\n        };\n    }\n\n    componentDidMount() {\n        \n        this.setupMatterJS();\n\n        //Load boards listener\n         monday.listen(\"context\", this.getContext)\n\n        // Settings changed listener\n        monday.listen(\"settings\", this.getSettings);\n    }\n\n    getContext = (res) => {\n        this.setState({context: res.data});\n        this.loadCompletedItems();\n    }\n\n    getSettings = (res) => {\n        this.setState({ settings: res.data });\n        this.loadCompletedItems();\n    }\n\n    loadCompletedItems = () => {\n        for (let i in this.state.context.boardIds) {\n            monday.api(`query ($completedState: String!, $boardID: Int!) { items_by_column_values (board_id: $boardID, column_id: \"status\", column_value: $completedState) { name id } }`, {\n                    variables: {completedState: this.state.settings.completed_state, boardID: this.state.context.boardIds[i]}\n                })\n                .then(res => {\n                    clearCrates();\n                    for (let i in res.data.items_by_column_values) {\n                        this.createBox(res.data.items_by_column_values[i].name);\n                        completedIDs[completedIDs.length] = res.data.items_by_column_values[i].id;\n                    }\n                    this.setState({completed_amount: completedIDs.length})\n            });\n        }\n    }\n\n    render() {\n        return <div className=\"App\" ref=\"launch_site\">\n            <p id=\"hover_label\">Hover</p>\n            <div className=\"launchDiv\">\n                <p className=\"launchTitle\" id=\"title\">{this.state.completed_amount} items ready to launch!</p>\n                <button onClick={launch} className=\"launchButton\">{this.state.button_text}</button>\n            </div>\n        </div>;\n    }\n\n    /** Creates a new box/crate */\n    createBox(name) {\n        let x = getRandomInt(200, 800);\n        let y = getRandomInt(50, 400);\n        let size = getRandomInt(50, 70);\n\n        let spriteNumber = getRandomInt(1, 8);\n\n        let crate = Bodies.rectangle(x, y, size, size, {\n            render: {\n                sprite: {\n                    texture: \"/sprites/crates/crate_\" + spriteNumber + \".png\",\n                    xScale: size / 475,\n                    yScale: size / 475 } },\n            id: name\n        });\n            \n        World.add(engine.world, [crate]);\n        crates[crates.length] = crate;\n    }\n\n    setupMatterJS = () => {\n        engine = Engine.create();\n\n        // create a renderer\n        render = Render.create({\n            element: this.refs.launch_site,\n            engine: engine,\n            options: {\n                wireframes: false,\n                background: '#fff',\n                width: window.innerWidth,\n                height: window.innerHeight - 100\n            }\n        });\n        render.options.wireframes = false;\n\n        var ground = Bodies.rectangle(window.innerWidth / 2 - 250, window.innerHeight - 100, window.innerWidth + 500, 20, { \n            isStatic: true,\n            render: { fillStyle: '#fff' }\n        });\n\n        var mouse = Mouse.create(render.canvas),\n        mouseConstraint = MouseConstraint.create(engine, {\n            mouse: mouse,\n            constraint: {\n                stiffness: 0.2,\n                render: { visible: false }\n            }\n        });\n\n        World.add(engine.world, [ground, mouseConstraint]);\n        Engine.run(engine);\n        Render.run(render);\n    \n        Events.on(engine, 'tick', () => {\n            var mousePosition = mouse.position;\n            var cratesUnderMouse = Matter.Query.point(crates, {x: mousePosition.x, y: mousePosition.y});\n            \n            const label = document.getElementById(\"hover_label\");\n            if (cratesUnderMouse.length > 0) {\n                let crate = cratesUnderMouse[0];\n                label.innerHTML = crate.id;\n                let labelHeight = (label.clientHeight + 1);\n                let labelWidth = (label.clientWidth + 1);\n                label.style.top = crate.position.y - 2 - labelHeight + \"px\";\n                label.style.left = crate.position.x - labelWidth / 2 + \"px\";\n                label.style.opacity = 1;\n            } else {\n                label.style.opacity = 0;\n            }\n        });\n    }\n}\n\nfunction launch() {\n    monday.execute(\"confirm\", {\n        message: \"Are you sure? This will launch all completed items off the earth's atmosphere and they will be gone forever!\", \n        confirmButton: \"Launch!\", \n        cancelButton: \"Cancel\", \n        excludeCancelButton: false\n     }).then((res) => {\n         if (res.data.confirm) {\n            deleteCompleted();\n         }\n     });\n}\n    \nfunction deleteCompleted() {\n    for (let i in completedIDs) {\n        let itemID = parseInt(completedIDs[i]);\n        monday.api(`mutation ($itemID: Int) { delete_item (item_id: $itemID) { id } }`, {\n            variables: {itemID: itemID } }\n        );\n    }\n    clearCrates();\n}\n\nfunction clearCrates() {\n    for (let i in crates) { World.remove(engine.world, crates[i]) }\n    crates = [];\n    completedIDs = [];\n}\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}