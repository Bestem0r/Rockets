{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vebj\\xF8rn\\\\Documents\\\\Monday\\\\quickstart-react\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\nconst monday = mondaySdk();\nvar completedIDs = []; // module aliases\n\nvar Engine = Matter.Engine,\n    Render = Matter.Render,\n    World = Matter.World,\n    Bodies = Matter.Bodies,\n    Events = Matter.Events,\n    MouseConstraint = Matter.MouseConstraint,\n    Mouse = Matter.Mouse;\nvar engine, render;\nvar crates = [];\nconst particleColors = [getComputedStyle(document.documentElement).getPropertyValue(\"--particle_1\"), getComputedStyle(document.documentElement).getPropertyValue(\"--particle_2\"), getComputedStyle(document.documentElement).getPropertyValue(\"--particle_3\"), getComputedStyle(document.documentElement).getPropertyValue(\"--particle_4\")];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.getContext = res => {\n      this.setState({\n        context: res.data\n      });\n      this.loadCompletedItems();\n    };\n\n    this.getSettings = res => {\n      this.setState({\n        settings: {\n          countdown: res.data.countdown\n        }\n      });\n\n      if (res.data.completed_state != \"\") {\n        this.setState({\n          settings: {\n            completed_state: res.data.completed_state\n          }\n        });\n        this.loadCompletedItems();\n      }\n\n      alert(JSON.stringify(res.data.columns));\n    };\n\n    this.loadCompletedItems = () => {\n      for (let i in this.state.context.boardIds) {\n        monday.api(`query ($completedState: String!, $boardID: Int!) { items_by_column_values (board_id: $boardID, column_id: \"status\", column_value: $completedState) { name id } }`, {\n          variables: {\n            completedState: this.state.settings.completed_state,\n            boardID: this.state.context.boardIds[i]\n          }\n        }).then(res => {\n          this.clearCrates();\n\n          for (let i in res.data.items_by_column_values) {\n            this.createBox(res.data.items_by_column_values[i].name);\n            completedIDs[completedIDs.length] = res.data.items_by_column_values[i].id;\n          }\n\n          this.setState({\n            info_text: completedIDs.length + \" items ready to launch\"\n          });\n        });\n      }\n    };\n\n    this.setupMatterJS = () => {\n      engine = Engine.create(); // create a renderer\n\n      render = Render.create({\n        element: this.refs.launch_site,\n        engine: engine,\n        options: {\n          wireframes: false,\n          background: '#fff',\n          width: window.innerWidth,\n          height: window.innerHeight - 100\n        }\n      });\n      var ground = Bodies.rectangle(window.innerWidth / 2 - 250, window.innerHeight - 100, window.innerWidth + 500, 20, {\n        isStatic: true,\n        render: {\n          fillStyle: '#fff'\n        }\n      });\n      var mouse = Mouse.create(render.canvas),\n          mouseConstraint = MouseConstraint.create(engine, {\n        mouse: mouse,\n        constraint: {\n          stiffness: 0.2,\n          render: {\n            visible: false\n          }\n        }\n      });\n      World.add(engine.world, [ground, mouseConstraint]);\n      Engine.run(engine);\n      Render.run(render);\n      Events.on(engine, 'tick', () => {\n        var mousePosition = mouse.position;\n        var cratesUnderMouse = Matter.Query.point(crates, {\n          x: mousePosition.x,\n          y: mousePosition.y\n        });\n        const label = document.getElementById(\"hover_label\");\n\n        if (cratesUnderMouse.length > 0) {\n          let crate = cratesUnderMouse[0];\n          label.innerHTML = crate.label;\n          label.style.top = crate.position.y - 1 - label.clientHeight + \"px\";\n          label.style.left = crate.position.x - (label.clientWidth + 1) / 2 + \"px\";\n          label.style.opacity = 1;\n        } else {\n          label.style.opacity = 0;\n        }\n      });\n    };\n\n    this.prepareLaunch = () => {\n      if (completedIDs.length === 0) {\n        monday.execute(\"notice\", {\n          type: \"error\",\n          message: \"Rocket can't be launched without any items!\",\n          timeout: 2000\n        });\n        return;\n      }\n\n      monday.execute(\"confirm\", {\n        message: \"Are you sure?\\n This will launch all completed items off the earth's atmosphere to the archive!\",\n        confirmButton: \"Launch!\",\n        cancelButton: \"Cancel\",\n        excludeCancelButton: false\n      }).then(res => {\n        if (res.data.confirm) {\n          this.deleteCompleted();\n          this.clearCrates();\n          var rocket = document.getElementById(\"rocket\");\n          var launchButton = document.getElementById(\"launchButton\");\n          launchButton.classList.add(\"countdown\");\n          rocket.style.display = \"block\";\n          this.setState({\n            info_text: \"Rocket launching in...\"\n          });\n          let count = parseInt(this.state.settings.countdown);\n          launchButton.innerHTML = count;\n\n          for (let i = 1; i <= parseInt(this.state.settings.countdown); i++) {\n            setTimeout(() => {\n              count--;\n              launchButton.innerHTML = count;\n\n              if (i === parseInt(this.state.settings.countdown)) {\n                this.launch();\n              }\n            }, i * 1000);\n          }\n        }\n      });\n    };\n\n    this.launch = () => {\n      var rocket = document.getElementById(\"rocket\");\n      rocket.style.animation = \"shake 0.3s 10\";\n      rocket.style.bottom = window.innerHeight + 20 + \"px\";\n      document.getElementById(\"particleContainer\").style.display = \"block\";\n\n      for (let i = 0; i < window.innerHeight * 1.2; i += window.innerHeight / 50) {\n        setTimeout(() => {\n          var x = window.innerWidth / 2;\n          var y = window.innerHeight - i;\n          this.createParticle(x, y);\n        }, i * 2.2);\n      }\n\n      setTimeout(() => {\n        monday.execute(\"notice\", {\n          message: \"Rocket successfully launched! Items are now archived!\",\n          type: \"success\",\n          timeout: 2000\n        });\n        setTimeout(() => {\n          this.reset();\n        }, 1000);\n      }, 2000);\n    };\n\n    this.reset = () => {\n      this.loadCompletedItems();\n      var launchButton = document.getElementById(\"launchButton\");\n      var rocket = document.getElementById(\"rocket\");\n      launchButton.classList.remove(\"countdown\");\n      launchButton.innerHTML = \"Launch now!\";\n      rocket.style.bottom = \"10%\";\n      rocket.style.display = \"none\";\n      rocket.style.animation = \"\";\n      document.getElementById(\"particleContainer\").style.display = \"none\";\n      this.setState({\n        info_text: \"0 items ready to launch!\"\n      });\n    };\n\n    this.createParticle = (x, y) => {\n      let particle = document.createElement(\"div\");\n      particle.classList.add(\"particle\");\n      let size = (Math.random() + 4) * 5;\n      let color = particleColors[getRandomInt(0, particleColors.length - 1)];\n      particle.style.width = size + \"px\";\n      particle.style.height = size + \"px\";\n      particle.style.borderRadius = size + \"px\";\n      particle.style.backgroundColor = color;\n      let destinationX = x + Math.ceil(Math.random() * 150) * (Math.round(Math.random()) ? 1 : -1);\n      let destinationY = y + (Math.random() + 15) * 10;\n      document.getElementById(\"particleContainer\").appendChild(particle);\n      let animation = particle.animate([{\n        transform: \"translate(-50%, -50%) translate(\" + x + \"px, \" + y + \"px) scale(1, 1)\",\n        opacity: 1\n      }, {\n        transform: \"translate(\" + destinationX + \"px,\" + destinationY + \"px) scale(2, 2)\",\n        opacity: 1\n      }], {\n        duration: Math.random() * 1000 + 1000,\n        easing: \"cubic-bezier(.05,.58,.33,1)\",\n        delay: Math.random() * 200\n      });\n\n      animation.onfinish = () => {\n        particle.remove();\n      };\n    };\n\n    this.deleteCompleted = () => {\n      for (let i in completedIDs) {\n        let itemID = parseInt(completedIDs[i]);\n        monday.api(`mutation ($itemID: Int) { archive_item (item_id: $itemID) { id } }`, {\n          variables: {\n            itemID: itemID\n          }\n        });\n      }\n    };\n\n    this.clearCrates = () => {\n      for (let i in crates) {\n        World.remove(engine.world, crates[i]);\n      }\n\n      crates = [];\n      completedIDs = [];\n    };\n\n    this.state = {\n      info_text: \"\",\n      button_text: \"Launch Now!\",\n      settings: {\n        completed_state: \"Done\",\n        countdown: 10\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.setupMatterJS(); //Load boards listener\n\n    monday.listen(\"context\", this.getContext); // Settings changed listener\n\n    monday.listen(\"settings\", this.getSettings);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      ref: \"launch_site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"hover_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, \"Hover\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"launch_title\",\n      id: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, this.state.info_text), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"launchButton\",\n      onClick: this.prepareLaunch,\n      className: \"launch_button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, this.state.button_text)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"particle_container\",\n      id: \"particleContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      alt: \"Rocket\",\n      className: \"rocket\",\n      id: \"rocket\",\n      src: \"sprites/mocket.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  createBox(name) {\n    let x = getRandomInt(200, 800);\n    let y = getRandomInt(50, 400);\n    let size = getRandomInt(50, 70);\n    let crate = Bodies.rectangle(x, y, size, size, {\n      render: {\n        sprite: {\n          texture: \"/sprites/crate.png\",\n          xScale: size / 475,\n          yScale: size / 475\n        }\n      },\n      label: name\n    });\n    World.add(engine.world, [crate]);\n    crates[crates.length] = crate;\n  }\n\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Vebjørn/Documents/Monday/quickstart-react/src/App.js"],"names":["React","mondaySdk","Matter","monday","completedIDs","Engine","Render","World","Bodies","Events","MouseConstraint","Mouse","engine","render","crates","particleColors","getComputedStyle","document","documentElement","getPropertyValue","App","Component","constructor","props","getContext","res","setState","context","data","loadCompletedItems","getSettings","settings","countdown","completed_state","alert","JSON","stringify","columns","i","state","boardIds","api","variables","completedState","boardID","then","clearCrates","items_by_column_values","createBox","name","length","id","info_text","setupMatterJS","create","element","refs","launch_site","options","wireframes","background","width","window","innerWidth","height","innerHeight","ground","rectangle","isStatic","fillStyle","mouse","canvas","mouseConstraint","constraint","stiffness","visible","add","world","run","on","mousePosition","position","cratesUnderMouse","Query","point","x","y","label","getElementById","crate","innerHTML","style","top","clientHeight","left","clientWidth","opacity","prepareLaunch","execute","type","message","timeout","confirmButton","cancelButton","excludeCancelButton","confirm","deleteCompleted","rocket","launchButton","classList","display","count","parseInt","setTimeout","launch","animation","bottom","createParticle","reset","remove","particle","createElement","size","Math","random","color","getRandomInt","borderRadius","backgroundColor","destinationX","ceil","round","destinationY","appendChild","animate","transform","duration","easing","delay","onfinish","itemID","button_text","componentDidMount","listen","sprite","texture","xScale","yScale","min","max","floor"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\n\nconst monday = mondaySdk();\nvar completedIDs = [];\n\n// module aliases\nvar Engine = Matter.Engine,\nRender = Matter.Render,\nWorld = Matter.World,\nBodies = Matter.Bodies,\nEvents = Matter.Events,\nMouseConstraint = Matter.MouseConstraint,\nMouse = Matter.Mouse;\n\nvar engine,\nrender;\nvar crates = [];\n\nconst particleColors = [\n    getComputedStyle(document.documentElement).getPropertyValue(\"--particle_1\"),\n    getComputedStyle(document.documentElement).getPropertyValue(\"--particle_2\"),\n    getComputedStyle(document.documentElement).getPropertyValue(\"--particle_3\"),\n    getComputedStyle(document.documentElement).getPropertyValue(\"--particle_4\")\n];\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        // Default state\n        this.state = { info_text: \"\", button_text: \"Launch Now!\", settings: { completed_state: \"Done\", countdown: 10 }, };\n    }\n\n    componentDidMount() {\n        this.setupMatterJS();\n\n        //Load boards listener\n        monday.listen(\"context\", this.getContext)\n\n        // Settings changed listener\n        monday.listen(\"settings\", this.getSettings);\n    }\n\n    render() {\n        return <div className=\"App\" ref=\"launch_site\">\n            <p id=\"hover_label\">Hover</p>\n            <div className=\"button_container\">\n                <p className=\"launch_title\" id=\"title\">{this.state.info_text}</p>\n                <button id=\"launchButton\" onClick={this.prepareLaunch} className=\"launch_button\">{this.state.button_text}</button>\n            </div>\n            <div className=\"particle_container\" id=\"particleContainer\"></div>\n            <img alt=\"Rocket\" className=\"rocket\" id=\"rocket\" src=\"sprites/mocket.png\"></img>\n        </div>;\n    }\n\n    getContext = (res) => {\n        this.setState({context: res.data});\n        this.loadCompletedItems();\n    }\n\n    getSettings = (res) => {\n        this.setState({ settings: { countdown: res.data.countdown }})\n        if (res.data.completed_state != \"\") {\n            this.setState({ settings: { completed_state: res.data.completed_state } });\n            this.loadCompletedItems();\n        }\n        alert(JSON.stringify(res.data.columns));\n    }\n\n    loadCompletedItems = () => {\n        for (let i in this.state.context.boardIds) {\n            monday.api(`query ($completedState: String!, $boardID: Int!) { items_by_column_values (board_id: $boardID, column_id: \"status\", column_value: $completedState) { name id } }`, {\n                    variables: {completedState: this.state.settings.completed_state, boardID: this.state.context.boardIds[i]}\n                })\n                .then(res => {\n                    this.clearCrates();\n                    for (let i in res.data.items_by_column_values) {\n                        this.createBox(res.data.items_by_column_values[i].name);\n                        completedIDs[completedIDs.length] = res.data.items_by_column_values[i].id;\n                    }\n                    this.setState({info_text: completedIDs.length + \" items ready to launch\"})\n            });\n        }\n    }\n\n    createBox(name) {\n        let x = getRandomInt(200, 800);\n        let y = getRandomInt(50, 400);\n        let size = getRandomInt(50, 70);\n\n        let crate = Bodies.rectangle(x, y, size, size, {\n            render: {\n                sprite: {\n                    texture: \"/sprites/crate.png\",\n                    xScale: size / 475,\n                    yScale: size / 475 } },\n            label: name\n        });\n            \n        World.add(engine.world, [crate]);\n        crates[crates.length] = crate;\n    }\n\n    setupMatterJS = () => {\n        engine = Engine.create();\n\n        // create a renderer\n        render = Render.create({\n            element: this.refs.launch_site,\n            engine: engine,\n            options: {\n                wireframes: false,\n                background: '#fff',\n                width: window.innerWidth,\n                height: window.innerHeight - 100\n            }\n        });\n\n        var ground = Bodies.rectangle(window.innerWidth / 2 - 250, window.innerHeight - 100, window.innerWidth + 500, 20, { \n            isStatic: true,\n            render: { fillStyle: '#fff' }\n        });\n\n        var mouse = Mouse.create(render.canvas),\n        mouseConstraint = MouseConstraint.create(engine, {\n            mouse: mouse,\n            constraint: {\n                stiffness: 0.2,\n                render: { visible: false }\n            }\n        });\n\n        World.add(engine.world, [ground, mouseConstraint]);\n        Engine.run(engine);\n        Render.run(render);\n        \n        Events.on(engine, 'tick', () => {\n            var mousePosition = mouse.position;\n            var cratesUnderMouse = Matter.Query.point(crates, {x: mousePosition.x, y: mousePosition.y});\n            \n            const label = document.getElementById(\"hover_label\");\n            if (cratesUnderMouse.length > 0) {\n                let crate = cratesUnderMouse[0];\n                label.innerHTML = crate.label;\n                label.style.top = crate.position.y - 1 - label.clientHeight + \"px\";\n                label.style.left = crate.position.x - (label.clientWidth + 1) / 2 + \"px\";\n                label.style.opacity = 1;\n            } else {\n                label.style.opacity = 0;\n            }\n        });\n    }\n\n    prepareLaunch = () => {\n        if (completedIDs.length === 0) {\n            monday.execute(\"notice\", {\n                type: \"error\",\n                message: \"Rocket can't be launched without any items!\",\n                timeout: 2000\n            });\n            return;\n        }\n        monday.execute(\"confirm\", {\n            message: \"Are you sure?\\n This will launch all completed items off the earth's atmosphere to the archive!\", \n            confirmButton: \"Launch!\", \n            cancelButton: \"Cancel\", \n            excludeCancelButton: false\n         }).then((res) => {\n\n             if (res.data.confirm) {\n                this.deleteCompleted();\n                this.clearCrates();\n                var rocket = document.getElementById(\"rocket\");\n                var launchButton = document.getElementById(\"launchButton\");\n\n                launchButton.classList.add(\"countdown\");\n                rocket.style.display = \"block\";\n                this.setState({info_text: \"Rocket launching in...\"})\n\n                let count = parseInt(this.state.settings.countdown);\n                launchButton.innerHTML = count;\n                for (let i = 1; i <= parseInt(this.state.settings.countdown); i ++) {\n                    setTimeout(() => {\n                        count --;\n                        launchButton.innerHTML = count;\n                        if (i === parseInt(this.state.settings.countdown)) { this.launch(); }\n                    }, i * 1000);\n                }\n        \n             }\n         });\n    }\n\n    launch = () => {\n        var rocket = document.getElementById(\"rocket\");\n        rocket.style.animation = \"shake 0.3s 10\";\n        rocket.style.bottom = window.innerHeight + 20 + \"px\";\n        document.getElementById(\"particleContainer\").style.display = \"block\";\n    \n        for (let i = 0; i < window.innerHeight * 1.2; i += window.innerHeight / 50) {\n            setTimeout(() => {\n                var x = window.innerWidth / 2;\n                var y = window.innerHeight - i;\n                this.createParticle(x, y);\n            }, i * 2.2);\n        }\n        setTimeout( () => {\n            monday.execute(\"notice\", { \n                message: \"Rocket successfully launched! Items are now archived!\",\n                type: \"success\",\n                timeout: 2000,\n             });\n             setTimeout( () => { this.reset() }, 1000);\n        }, 2000);\n    }\n\n    reset = () => {\n        this.loadCompletedItems();\n        var launchButton = document.getElementById(\"launchButton\");\n        var rocket = document.getElementById(\"rocket\");\n        launchButton.classList.remove(\"countdown\");\n        launchButton.innerHTML = \"Launch now!\"\n        rocket.style.bottom = \"10%\";\n        rocket.style.display = \"none\";\n        rocket.style.animation = \"\";\n        document.getElementById(\"particleContainer\").style.display = \"none\";\n        this.setState({info_text: \"0 items ready to launch!\"})\n    }\n\n    createParticle = (x, y) => {\n        let particle = document.createElement(\"div\");\n        particle.classList.add(\"particle\");\n    \n        let size = (Math.random() + 4) * 5;\n        let color = particleColors[getRandomInt(0, particleColors.length - 1)];\n    \n        particle.style.width = size + \"px\";\n        particle.style.height = size + \"px\";\n        particle.style.borderRadius = size + \"px\";\n        particle.style.backgroundColor = color;\n    \n        let destinationX = x + Math.ceil(Math.random() * 150) * (Math.round(Math.random()) ? 1 : - 1)\n        let destinationY = y + ((Math.random() + 15) * 10);\n    \n        document.getElementById(\"particleContainer\").appendChild(particle);\n        let animation = particle.animate(\n            [{\n                    transform: \"translate(-50%, -50%) translate(\" + x + \"px, \" + y + \"px) scale(1, 1)\",\n                    opacity: 1,\n                },{\n                    transform: \"translate(\" + destinationX + \"px,\" + destinationY + \"px) scale(2, 2)\",\n                    opacity: 1,\n                },],\n                {\n                duration: Math.random() * 1000 + 1000,\n                easing: \"cubic-bezier(.05,.58,.33,1)\",\n                delay: Math.random() * 200,\n            }\n        );\n        animation.onfinish = () => {particle.remove(); };\n    }\n        \n    deleteCompleted = () => {\n        for (let i in completedIDs) {\n            let itemID = parseInt(completedIDs[i]);\n            monday.api(`mutation ($itemID: Int) { archive_item (item_id: $itemID) { id } }`, {\n                variables: {itemID: itemID } }\n            );\n        }\n    }\n    \n    clearCrates = () => {\n        for (let i in crates) { World.remove(engine.world, crates[i]) }\n        crates = [];\n        completedIDs = [];\n    }\n}\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}