{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vebj\\xF8rn\\\\Documents\\\\Monday\\\\quickstart-react\\\\src\\\\App.js\";\nimport React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\nconst monday = mondaySdk();\nvar completed = [];\nvar completed_state = \"Done\"; // module aliases\n\nvar Engine = Matter.Engine,\n    Render = Matter.Render,\n    World = Matter.World,\n    Bodies = Matter.Bodies,\n    Body = Matter.Body,\n    Events = Matter.Events,\n    MouseConstraint = Matter.MouseConstraint,\n    Mouse = Matter.Mouse;\nvar engine, render;\nvar crates = [];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.state = {\n      settings: {\n        completed_state: \"Done\"\n      },\n      name: \"\"\n    };\n  }\n\n  componentDidMount() {\n    engine = Engine.create(); // create a renderer\n\n    render = Render.create({\n      element: this.refs.launch_site,\n      engine: engine,\n      options: {\n        wireframes: false,\n        background: '#fff',\n        width: window.innerWidth,\n        height: window.innerHeight - 100\n      }\n    });\n    render.options.wireframes = false;\n    var ground = Bodies.rectangle(window.innerWidth / 2 - 250, window.innerHeight - 100, window.innerWidth + 500, 20, {\n      isStatic: true,\n      render: {\n        fillStyle: '#fff'\n      }\n    });\n    var mouse = Mouse.create(render.canvas),\n        mouseConstraint = MouseConstraint.create(engine, {\n      mouse: mouse,\n      constraint: {\n        stiffness: 0.2,\n        render: {\n          visible: false\n        }\n      }\n    });\n    World.add(engine.world, [ground, mouseConstraint]);\n    Engine.run(engine);\n    Render.run(render);\n    Events.on(engine, 'tick', function (event) {\n      var mousePosition = mouse.position;\n      var cratesUnderMouse = Matter.Query.point(crates, {\n        x: mousePosition.x,\n        y: mousePosition.y\n      });\n      const label = document.getElementById(\"hover_label\");\n\n      if (cratesUnderMouse.length > 0) {\n        let crate = cratesUnderMouse[0];\n        let newXPos = crate.position.x - crate.width / 2;\n        label.innerHTML = crate.id;\n        label.style.top = crate.position.y + \"px\";\n        label.style.left = newXPos + \"px\";\n        label.style.opacity = 1;\n      } else {\n        label.style.opacity = 0;\n      }\n    }); //Load boards listener\n\n    monday.listen(\"context\", res => {\n      this.setState({\n        context: res.data\n      });\n      monday.api(`query ($boardIds: [Int]) { boards (ids:$boardIds) { name items { name column_values { title text } } } }`, {\n        variables: {\n          boardIds: this.state.context.boardIds\n        }\n      }).then(res => {\n        this.setState({\n          boardData: res.data\n        });\n        this.loadCompleted();\n      });\n    }); // Settings changed listener\n\n    monday.listen(\"settings\", res => {\n      this.setState({\n        settings: res.data\n      });\n      completed_state = this.state.settings.completed_state;\n      this.loadCompleted();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      ref: \"launch_site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"hover_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, \"Hover\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"launchDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"launchTitle\",\n      id: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: moveCrates,\n      className: \"launchButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, \"Launch now\")));\n  }\n  /** Loads completed items into the completed array */\n\n\n  loadCompleted() {\n    completed = [];\n\n    for (let i in this.state.boardData.boards) {\n      for (let j in this.state.boardData.boards[i].items) {\n        var itemName = this.state.boardData.boards[i].items[j].name;\n\n        for (let k in this.state.boardData.boards[i].items[j].column_values) {\n          if (this.state.boardData.boards[i].items[j].column_values[k].text === completed_state) {\n            completed[completed.length] = itemName;\n            break;\n          }\n        }\n      }\n    }\n\n    document.getElementById(\"title\").innerHTML = completed.length + \" items ready to launch!\";\n    this.createBoxes();\n  }\n  /** Creates crates based on data in the completed array */\n\n\n  createBoxes() {\n    for (let i in crates) {\n      World.remove(engine.world, crates[i]);\n    }\n\n    crates = [];\n\n    for (let i in completed) {\n      let x = getRandomInt(200, 800);\n      let y = getRandomInt(50, 400);\n      let size = getRandomInt(50, 80);\n      let spriteNumber = getRandomInt(1, 8);\n      let crate = Bodies.rectangle(x, y, size, size, {\n        render: {\n          sprite: {\n            texture: \"/sprites/crates/crate_\" + spriteNumber + \".png\",\n            xScale: size / 480,\n            yScale: size / 480\n          }\n        },\n        id: completed[i]\n      });\n      World.add(engine.world, [crate]);\n      crates[crates.length] = crate;\n    }\n  }\n\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction moveCrates() {\n  for (let i in crates) {\n    let crate = crates[i];\n    Body.applyForce(crate, {\n      x: -100,\n      y: window.innerHeight + 100\n    }, {\n      x: 0.3,\n      y: -0.35\n    });\n  }\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Vebj√∏rn/Documents/Monday/quickstart-react/src/App.js"],"names":["React","createElement","mondaySdk","Matter","monday","completed","completed_state","Engine","Render","World","Bodies","Body","Events","MouseConstraint","Mouse","engine","render","crates","App","Component","constructor","props","state","settings","name","componentDidMount","create","element","refs","launch_site","options","wireframes","background","width","window","innerWidth","height","innerHeight","ground","rectangle","isStatic","fillStyle","mouse","canvas","mouseConstraint","constraint","stiffness","visible","add","world","run","on","event","mousePosition","position","cratesUnderMouse","Query","point","x","y","label","document","getElementById","length","crate","newXPos","innerHTML","id","style","top","left","opacity","listen","res","setState","context","data","api","variables","boardIds","then","boardData","loadCompleted","moveCrates","i","boards","j","items","itemName","k","column_values","text","createBoxes","remove","getRandomInt","size","spriteNumber","sprite","texture","xScale","yScale","min","max","Math","ceil","floor","random","applyForce"],"mappings":"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","sourcesContent":["import React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\n\nconst monday = mondaySdk();\nvar completed = [];\nvar completed_state = \"Done\";\n\n// module aliases\nvar Engine = Matter.Engine,\nRender = Matter.Render,\nWorld = Matter.World,\nBodies = Matter.Bodies,\nBody = Matter.Body,\nEvents = Matter.Events,\nMouseConstraint = Matter.MouseConstraint,\nMouse = Matter.Mouse;\n\nvar engine,\nrender;\n\nvar crates = [];\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Default state\n        this.state = {\n            settings: {\n                completed_state: \"Done\"\n            },\n            name: \"\",\n        };\n    }\n\n    componentDidMount() {\n\n        engine = Engine.create();\n\n        // create a renderer\n        render = Render.create({\n            element: this.refs.launch_site,\n            engine: engine,\n            options: {\n                wireframes: false,\n                background: '#fff',\n                width: window.innerWidth,\n                height: window.innerHeight - 100\n            }\n        });\n        render.options.wireframes = false;\n\n        var ground = Bodies.rectangle(window.innerWidth / 2 - 250, window.innerHeight - 100, window.innerWidth + 500, 20, { \n            isStatic: true,\n            render: { fillStyle: '#fff' }\n        });\n\n        var mouse = Mouse.create(render.canvas),\n        mouseConstraint = MouseConstraint.create(engine, {\n            mouse: mouse,\n            constraint: {\n                stiffness: 0.2,\n                render: {\n                    visible: false\n                }\n            }\n        });\n\n        World.add(engine.world, [ground, mouseConstraint]);\n        Engine.run(engine);\n        Render.run(render);\n    \n        Events.on(engine, 'tick', function(event) {\n            var mousePosition = mouse.position;\n            var cratesUnderMouse = Matter.Query.point(crates, {x: mousePosition.x, y: mousePosition.y});\n            \n            const label = document.getElementById(\"hover_label\");\n            if (cratesUnderMouse.length > 0) {\n                let crate = cratesUnderMouse[0];\n                let newXPos = crate.position.x - (crate.width / 2);\n                label.innerHTML = crate.id;\n                label.style.top = crate.position.y + \"px\";\n                label.style.left = newXPos + \"px\";\n                label.style.opacity = 1;\n            } else {\n                label.style.opacity = 0;\n            }\n        });\n\n        //Load boards listener\n         monday.listen(\"context\", res => {\n            this.setState({context: res.data});\n\n            monday.api(`query ($boardIds: [Int]) { boards (ids:$boardIds) { name items { name column_values { title text } } } }`,\n              { variables: {boardIds: this.state.context.boardIds} }\n            )\n\n            .then(res => {\n                this.setState({boardData: res.data});\n                this.loadCompleted();\n            });\n          })\n\n        // Settings changed listener\n        monday.listen(\"settings\", res => {\n            this.setState({ settings: res.data });\n            completed_state = this.state.settings.completed_state;\n\n             this.loadCompleted();\n        });\n    }\n\n    render() {\n        return <div className=\"App\" ref=\"launch_site\">\n            <p id=\"hover_label\">Hover</p>\n            <div className=\"launchDiv\">\n                <p className=\"launchTitle\" id=\"title\"></p>\n                <button onClick={moveCrates} className=\"launchButton\">Launch now</button>\n            </div>\n        </div>;\n    }\n\n    /** Loads completed items into the completed array */\n    loadCompleted() {\n\n        completed = [];\n        for (let i in this.state.boardData.boards) {\n            for (let j in this.state.boardData.boards[i].items) {\n\n                var itemName = this.state.boardData.boards[i].items[j].name;\n\n                for (let k in this.state.boardData.boards[i].items[j].column_values) {\n                    if (this.state.boardData.boards[i].items[j].column_values[k].text === completed_state) {\n                        completed[completed.length] = itemName;\n                        break;\n                    }\n                }   \n            }\n        }\n        document.getElementById(\"title\").innerHTML = completed.length + \" items ready to launch!\";\n        this.createBoxes();\n    }\n\n    /** Creates crates based on data in the completed array */\n    createBoxes() {\n        for (let i in crates) {\n            World.remove(engine.world, crates[i]);\n        }\n        crates = [];\n        for (let i in completed) {\n\n            let x = getRandomInt(200, 800);\n            let y = getRandomInt(50, 400);\n            let size = getRandomInt(50, 80);\n\n            let spriteNumber = getRandomInt(1, 8);\n\n            let crate = Bodies.rectangle(x, y, size, size, {\n                render: {\n                    sprite: {\n                        texture: \"/sprites/crates/crate_\" + spriteNumber + \".png\",\n                        xScale: size / 480,\n                        yScale: size / 480\n                    }\n                },\n                id: completed[i],\n            });\n            \n            World.add(engine.world, [crate]);\n            crates[crates.length] = crate;\n            \n        }\n    }\n}\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction moveCrates() {\n    for (let i in crates) {\n        let crate = crates[i];\n        Body.applyForce(crate, {x: - 100, y: window.innerHeight + 100}, {x: 0.3, y: -0.35});\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}