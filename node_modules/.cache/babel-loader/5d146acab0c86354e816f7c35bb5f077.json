{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vebj\\xF8rn\\\\Documents\\\\Monday\\\\quickstart-react\\\\src\\\\App.js\";\nimport React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\nconst monday = mondaySdk();\nvar completedIDs = []; // module aliases\n\nvar Engine = Matter.Engine,\n    Render = Matter.Render,\n    World = Matter.World,\n    Bodies = Matter.Bodies,\n    Events = Matter.Events,\n    MouseConstraint = Matter.MouseConstraint,\n    Mouse = Matter.Mouse;\nvar engine, render;\nvar crates = [];\nconst particleColors = [getComputedStyle(document.documentElement).getPropertyValue(\"--particle_1\"), getComputedStyle(document.documentElement).getPropertyValue(\"--particle_2\"), getComputedStyle(document.documentElement).getPropertyValue(\"--particle_3\"), getComputedStyle(document.documentElement).getPropertyValue(\"--particle_4\")];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.getContext = res => {\n      this.setState({\n        context: res.data\n      });\n      this.loadCompletedItems();\n    };\n\n    this.getSettings = res => {\n      this.setState({\n        settings: res.data\n      });\n      this.loadCompletedItems();\n    };\n\n    this.loadCompletedItems = () => {\n      for (let i in this.state.context.boardIds) {\n        monday.api(`query ($completedState: String!, $boardID: Int!) { items_by_column_values (board_id: $boardID, column_id: \"status\", column_value: $completedState) { name id } }`, {\n          variables: {\n            completedState: this.state.settings.completed_state,\n            boardID: this.state.context.boardIds[i]\n          }\n        }).then(res => {\n          this.clearCrates();\n\n          for (let i in res.data.items_by_column_values) {\n            this.createBox(res.data.items_by_column_values[i].name);\n            completedIDs[completedIDs.length] = res.data.items_by_column_values[i].id;\n          }\n\n          this.setState({\n            info_text: completedIDs.length + \" items ready to launch\"\n          });\n        });\n      }\n    };\n\n    this.setupMatterJS = () => {\n      engine = Engine.create(); // create a renderer\n\n      render = Render.create({\n        element: this.refs.launch_site,\n        engine: engine,\n        options: {\n          wireframes: false,\n          background: '#fff',\n          width: window.innerWidth,\n          height: window.innerHeight - 100\n        }\n      });\n      var ground = Bodies.rectangle(window.innerWidth / 2 - 250, window.innerHeight - 100, window.innerWidth + 500, 20, {\n        isStatic: true,\n        render: {\n          fillStyle: '#fff'\n        }\n      });\n      var mouse = Mouse.create(render.canvas),\n          mouseConstraint = MouseConstraint.create(engine, {\n        mouse: mouse,\n        constraint: {\n          stiffness: 0.2,\n          render: {\n            visible: false\n          }\n        }\n      });\n      World.add(engine.world, [ground, mouseConstraint]);\n      Engine.run(engine);\n      Render.run(render);\n      Events.on(engine, 'tick', () => {\n        var mousePosition = mouse.position;\n        var cratesUnderMouse = Matter.Query.point(crates, {\n          x: mousePosition.x,\n          y: mousePosition.y\n        });\n        const label = document.getElementById(\"hover_label\");\n\n        if (cratesUnderMouse.length > 0) {\n          let crate = cratesUnderMouse[0];\n          label.innerHTML = crate.id;\n          label.style.top = crate.position.y - 1 - label.clientHeight + \"px\";\n          label.style.left = crate.position.x - (label.clientWidth + 1) / 2 + \"px\";\n          label.style.opacity = 1;\n        } else {\n          label.style.opacity = 0;\n        }\n      });\n    };\n\n    this.prepareLaunch = () => {\n      monday.execute(\"confirm\", {\n        message: \"Are you sure?\\n This will launch all completed items off the earth's atmosphere to the archive!\",\n        confirmButton: \"Launch!\",\n        cancelButton: \"Cancel\",\n        excludeCancelButton: false\n      }).then(res => {\n        if (res.data.confirm) {\n          this.clearCrates();\n          var rocket = document.getElementById(\"rocket\");\n          var launchButton = document.getElementById(\"launchButton\");\n          launchButton.classList.add(\"countdown\");\n          rocket.style.display = \"block\";\n          this.setState({\n            info_text: \"Rocket launching in...\"\n          });\n          let count = 3;\n          launchButton.innerHTML = count;\n\n          for (let i = 1; i <= 3; i++) {\n            setTimeout(() => {\n              count--;\n              launchButton.innerHTML = count;\n\n              if (i === 3) {\n                this.launch();\n              }\n            }, i * 1000);\n          }\n        }\n      });\n    };\n\n    this.launch = () => {\n      var rocket = document.getElementById(\"rocket\");\n      rocket.style.animation = \"shake 0.3s 10\";\n      rocket.style.bottom = window.innerHeight + 20 + \"px\";\n      document.getElementById(\"particleContainer\").style.display = \"block\";\n\n      for (let i = 0; i < window.innerHeight * 1.2; i += window.innerHeight / 50) {\n        setTimeout(() => {\n          var x = window.innerWidth / 2;\n          var y = window.innerHeight - i;\n          this.createParticle(x, y);\n        }, i * 2.2);\n      }\n\n      setTimeout(() => {\n        monday.execute(\"notice\", {\n          message: \"Rocket successfully launched! Items are now archived!\",\n          type: \"success\",\n          timeout: 2000\n        });\n        this.reset();\n      }, 2000);\n      this.deleteCompleted();\n    };\n\n    this.reset = () => {\n      this.loadCompletedItems();\n      var launchButton = document.getElementById(\"launchButton\");\n      launchButton.classList.remove(\"countdown\");\n      launchButton.innerHTML = \"Launch!\";\n      document.getElementById(\"rocket\").style.bottom = \"10%\";\n    };\n\n    this.createParticle = (x, y) => {\n      let particle = document.createElement(\"div\");\n      particle.classList.add(\"particle\");\n      let size = (Math.random() + 4) * 5;\n      let color = particleColors[getRandomInt(0, particleColors.length - 1)];\n      particle.style.width = size + \"px\";\n      particle.style.height = size + \"px\";\n      particle.style.borderRadius = size + \"px\";\n      particle.style.backgroundColor = color;\n      let destinationX = x + Math.ceil(Math.random() * 150) * (Math.round(Math.random()) ? 1 : -1);\n      let destinationY = y + (Math.random() + 15) * 10;\n      document.getElementById(\"particleContainer\").appendChild(particle);\n      let animation = particle.animate([{\n        transform: \"translate(-50%, -50%) translate(\" + x + \"px, \" + y + \"px) scale(1, 1)\",\n        opacity: 1\n      }, {\n        transform: \"translate(\" + destinationX + \"px,\" + destinationY + \"px) scale(2, 2)\",\n        opacity: 0.2\n      }], {\n        duration: Math.random() * 1000 + 1000,\n        easing: \"cubic-bezier(.05,.58,.33,1)\",\n        delay: Math.random() * 200\n      });\n\n      animation.onfinish = () => {\n        particle.remove();\n      };\n    };\n\n    this.deleteCompleted = () => {\n      for (let i in completedIDs) {\n        let itemID = parseInt(completedIDs[i]);\n        monday.api(`mutation ($itemID: Int) { archive_item (item_id: $itemID) { id } }`, {\n          variables: {\n            itemID: itemID\n          }\n        });\n      }\n    };\n\n    this.clearCrates = () => {\n      for (let i in crates) {\n        World.remove(engine.world, crates[i]);\n      }\n\n      crates = [];\n      completedIDs = [];\n    };\n\n    this.state = {\n      info_text: \"\",\n      button_text: \"Launch Now!\",\n      settings: {\n        completed_state: \"Done\"\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.setupMatterJS(); //Load boards listener\n\n    monday.listen(\"context\", this.getContext); // Settings changed listener\n\n    monday.listen(\"settings\", this.getSettings);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      ref: \"launch_site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"hover_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, \"Hover\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"launch_title\",\n      id: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, this.state.info_text), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"launchButton\",\n      onClick: this.prepareLaunch,\n      className: \"launch_button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, this.state.button_text)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"particle_container\",\n      id: \"particleContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"rocket\",\n      id: \"rocket\",\n      src: \"sprites/mocket.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  /** Creates a new box/crate */\n  createBox(name) {\n    let x = getRandomInt(200, 800);\n    let y = getRandomInt(50, 400);\n    let size = getRandomInt(50, 70);\n    let crate = Bodies.rectangle(x, y, size, size, {\n      render: {\n        sprite: {\n          texture: \"/sprites/crate.png\",\n          xScale: size / 475,\n          yScale: size / 475\n        }\n      },\n      id: name\n    });\n    World.add(engine.world, [crate]);\n    crates[crates.length] = crate;\n  }\n\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Vebjørn/Documents/Monday/quickstart-react/src/App.js"],"names":["React","createElement","mondaySdk","Matter","monday","completedIDs","Engine","Render","World","Bodies","Events","MouseConstraint","Mouse","engine","render","crates","particleColors","getComputedStyle","document","documentElement","getPropertyValue","App","Component","constructor","props","getContext","res","setState","context","data","loadCompletedItems","getSettings","settings","i","state","boardIds","api","variables","completedState","completed_state","boardID","then","clearCrates","items_by_column_values","createBox","name","length","id","info_text","setupMatterJS","create","element","refs","launch_site","options","wireframes","background","width","window","innerWidth","height","innerHeight","ground","rectangle","isStatic","fillStyle","mouse","canvas","mouseConstraint","constraint","stiffness","visible","add","world","run","on","mousePosition","position","cratesUnderMouse","Query","point","x","y","label","getElementById","crate","innerHTML","style","top","clientHeight","left","clientWidth","opacity","prepareLaunch","execute","message","confirmButton","cancelButton","excludeCancelButton","confirm","rocket","launchButton","classList","display","count","setTimeout","launch","animation","bottom","createParticle","type","timeout","reset","deleteCompleted","remove","particle","size","Math","random","color","getRandomInt","borderRadius","backgroundColor","destinationX","ceil","round","destinationY","appendChild","animate","transform","duration","easing","delay","onfinish","itemID","parseInt","button_text","componentDidMount","listen","sprite","texture","xScale","yScale","min","max","floor"],"mappings":"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","sourcesContent":["import React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\n\nconst monday = mondaySdk();\nvar completedIDs = [];\n\n// module aliases\nvar Engine = Matter.Engine,\nRender = Matter.Render,\nWorld = Matter.World,\nBodies = Matter.Bodies,\nEvents = Matter.Events,\nMouseConstraint = Matter.MouseConstraint,\nMouse = Matter.Mouse;\n\nvar engine,\nrender;\nvar crates = [];\n\nconst particleColors = [\n    getComputedStyle(document.documentElement).getPropertyValue(\"--particle_1\"),\n    getComputedStyle(document.documentElement).getPropertyValue(\"--particle_2\"),\n    getComputedStyle(document.documentElement).getPropertyValue(\"--particle_3\"),\n    getComputedStyle(document.documentElement).getPropertyValue(\"--particle_4\")\n];\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        // Default state\n        this.state = { info_text: \"\", button_text: \"Launch Now!\", settings: { completed_state: \"Done\" }, };\n    }\n\n    componentDidMount() {\n        this.setupMatterJS();\n\n        //Load boards listener\n         monday.listen(\"context\", this.getContext)\n\n        // Settings changed listener\n        monday.listen(\"settings\", this.getSettings);\n    }\n\n    render() {\n        return <div className=\"App\" ref=\"launch_site\">\n            <p id=\"hover_label\">Hover</p>\n            <div className=\"button_container\">\n                <p className=\"launch_title\" id=\"title\">{this.state.info_text}</p>\n                <button id=\"launchButton\" onClick={this.prepareLaunch} className=\"launch_button\">{this.state.button_text}</button>\n            </div>\n            <div className=\"particle_container\" id=\"particleContainer\"></div>\n            <img className=\"rocket\" id=\"rocket\" src=\"sprites/mocket.png\"></img>\n        </div>;\n    }\n\n    getContext = (res) => {\n        this.setState({context: res.data});\n        this.loadCompletedItems();\n    }\n\n    getSettings = (res) => {\n        this.setState({ settings: res.data });\n        this.loadCompletedItems();\n    }\n\n    loadCompletedItems = () => {\n        for (let i in this.state.context.boardIds) {\n            monday.api(`query ($completedState: String!, $boardID: Int!) { items_by_column_values (board_id: $boardID, column_id: \"status\", column_value: $completedState) { name id } }`, {\n                    variables: {completedState: this.state.settings.completed_state, boardID: this.state.context.boardIds[i]}\n                })\n                .then(res => {\n                    this.clearCrates();\n                    for (let i in res.data.items_by_column_values) {\n                        this.createBox(res.data.items_by_column_values[i].name);\n                        completedIDs[completedIDs.length] = res.data.items_by_column_values[i].id;\n                    }\n                    this.setState({info_text: completedIDs.length + \" items ready to launch\"})\n            });\n        }\n    }\n\n    /** Creates a new box/crate */\n    createBox(name) {\n        let x = getRandomInt(200, 800);\n        let y = getRandomInt(50, 400);\n        let size = getRandomInt(50, 70);\n\n        let crate = Bodies.rectangle(x, y, size, size, {\n            render: {\n                sprite: {\n                    texture: \"/sprites/crate.png\",\n                    xScale: size / 475,\n                    yScale: size / 475 } },\n            id: name\n        });\n            \n        World.add(engine.world, [crate]);\n        crates[crates.length] = crate;\n    }\n\n    setupMatterJS = () => {\n        engine = Engine.create();\n\n        // create a renderer\n        render = Render.create({\n            element: this.refs.launch_site,\n            engine: engine,\n            options: {\n                wireframes: false,\n                background: '#fff',\n                width: window.innerWidth,\n                height: window.innerHeight - 100\n            }\n        });\n\n        var ground = Bodies.rectangle(window.innerWidth / 2 - 250, window.innerHeight - 100, window.innerWidth + 500, 20, { \n            isStatic: true,\n            render: { fillStyle: '#fff' }\n        });\n\n        var mouse = Mouse.create(render.canvas),\n        mouseConstraint = MouseConstraint.create(engine, {\n            mouse: mouse,\n            constraint: {\n                stiffness: 0.2,\n                render: { visible: false }\n            }\n        });\n\n        World.add(engine.world, [ground, mouseConstraint]);\n        Engine.run(engine);\n        Render.run(render);\n        \n        Events.on(engine, 'tick', () => {\n            var mousePosition = mouse.position;\n            var cratesUnderMouse = Matter.Query.point(crates, {x: mousePosition.x, y: mousePosition.y});\n            \n            const label = document.getElementById(\"hover_label\");\n            if (cratesUnderMouse.length > 0) {\n                let crate = cratesUnderMouse[0];\n                label.innerHTML = crate.id;\n                label.style.top = crate.position.y - 1 - label.clientHeight + \"px\";\n                label.style.left = crate.position.x - (label.clientWidth + 1) / 2 + \"px\";\n                label.style.opacity = 1;\n            } else {\n                label.style.opacity = 0;\n            }\n        });\n    }\n\n    prepareLaunch = () => {\n        monday.execute(\"confirm\", {\n            message: \"Are you sure?\\n This will launch all completed items off the earth's atmosphere to the archive!\", \n            confirmButton: \"Launch!\", \n            cancelButton: \"Cancel\", \n            excludeCancelButton: false\n         }).then((res) => {\n\n             if (res.data.confirm) {\n                this.clearCrates();\n                var rocket = document.getElementById(\"rocket\");\n                var launchButton = document.getElementById(\"launchButton\");\n\n                launchButton.classList.add(\"countdown\");\n                rocket.style.display = \"block\";\n                this.setState({info_text: \"Rocket launching in...\"})\n\n                let count = 3;\n                launchButton.innerHTML = count;\n                for (let i = 1; i <= 3; i ++) {\n                    setTimeout(() => {\n                        count --;\n                        launchButton.innerHTML = count;\n                        if (i === 3) { this.launch(); }\n                    }, i * 1000);\n                }\n        \n             }\n         });\n    }\n\n    launch = () => {\n        var rocket = document.getElementById(\"rocket\");\n        rocket.style.animation = \"shake 0.3s 10\";\n        rocket.style.bottom = window.innerHeight + 20 + \"px\";\n        document.getElementById(\"particleContainer\").style.display = \"block\";\n    \n        for (let i = 0; i < window.innerHeight * 1.2; i += window.innerHeight / 50) {\n            setTimeout(() => {\n                var x = window.innerWidth / 2;\n                var y = window.innerHeight - i;\n                this.createParticle(x, y);\n            }, i * 2.2);\n        }\n        setTimeout( () => {\n            monday.execute(\"notice\", { \n                message: \"Rocket successfully launched! Items are now archived!\",\n                type: \"success\",\n                timeout: 2000,\n             });\n             this.reset()\n        }, 2000)\n        this.deleteCompleted();\n    }\n\n    reset = () => {\n        this.loadCompletedItems();\n        var launchButton = document.getElementById(\"launchButton\");\n        launchButton.classList.remove(\"countdown\");\n        launchButton.innerHTML = \"Launch!\"\n        document.getElementById(\"rocket\").style.bottom = \"10%\";\n    }\n\n    createParticle = (x, y) => {\n        let particle = document.createElement(\"div\");\n        particle.classList.add(\"particle\");\n    \n        let size = (Math.random() + 4) * 5;\n        let color = particleColors[getRandomInt(0, particleColors.length - 1)];\n    \n        particle.style.width = size + \"px\";\n        particle.style.height = size + \"px\";\n        particle.style.borderRadius = size + \"px\";\n        particle.style.backgroundColor = color;\n    \n        let destinationX = x + Math.ceil(Math.random() * 150) * (Math.round(Math.random()) ? 1 : - 1)\n        let destinationY = y + ((Math.random() + 15) * 10);\n    \n        document.getElementById(\"particleContainer\").appendChild(particle);\n        let animation = particle.animate(\n            [\n                {\n                    transform: \"translate(-50%, -50%) translate(\" + x + \"px, \" + y + \"px) scale(1, 1)\",\n                    opacity: 1,\n                },\n                {\n                    transform: \"translate(\" + destinationX + \"px,\" + destinationY + \"px) scale(2, 2)\",\n                    opacity: 0.2,\n                },\n            ],\n            {\n                duration: Math.random() * 1000 + 1000,\n                easing: \"cubic-bezier(.05,.58,.33,1)\",\n                delay: Math.random() * 200,\n            }\n        );\n        animation.onfinish = () => {particle.remove(); };\n    }\n        \n    deleteCompleted = () => {\n        for (let i in completedIDs) {\n            let itemID = parseInt(completedIDs[i]);\n            monday.api(`mutation ($itemID: Int) { archive_item (item_id: $itemID) { id } }`, {\n                variables: {itemID: itemID } }\n            );\n        }\n    }\n    \n    clearCrates = () => {\n        for (let i in crates) { World.remove(engine.world, crates[i]) }\n        crates = [];\n        completedIDs = [];\n    }\n}\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}