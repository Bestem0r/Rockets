{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vebj\\xF8rn\\\\Documents\\\\Monday\\\\quickstart-react\\\\src\\\\App.js\";\nimport React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nconst monday = mondaySdk();\nvar completed = [];\nvar completed_state = \"Done\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.state = {\n      settings: {\n        completed_state: \"Done\"\n      },\n      name: \"\"\n    };\n  }\n\n  componentDidMount() {\n    gravity(); //Load boards listener\n\n    monday.listen(\"context\", res => {\n      this.setState({\n        context: res.data\n      });\n      monday.api(`query ($boardIds: [Int]) { boards (ids:$boardIds) { name items { name column_values { title text } } } }`, {\n        variables: {\n          boardIds: this.state.context.boardIds\n        }\n      }).then(res => {\n        this.setState({\n          boardData: res.data\n        });\n        this.loadCompleted();\n      });\n    }); // Settings changed listener\n\n    monday.listen(\"settings\", res => {\n      this.setState({\n        settings: res.data\n      });\n      completed_state = this.state.settings.completed_state;\n      this.loadCompleted();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      id: \"main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 16\n      }\n    });\n  }\n  /** Loads completed items into the completed array */\n\n\n  loadCompleted() {\n    completed = [];\n\n    for (let i in this.state.boardData.boards) {\n      for (let j in this.state.boardData.boards[i].items) {\n        var itemName = this.state.boardData.boards[i].items[j].name;\n\n        for (let k in this.state.boardData.boards[i].items[j].column_values) {\n          if (this.state.boardData.boards[i].items[j].column_values[k].text == completed_state) {\n            completed[completed.length] = itemName;\n          }\n        }\n      }\n    }\n\n    this.createBoxes();\n  }\n  /** Creates crates based on data in the completed array */\n\n\n  createBoxes() {\n    for (var i in completed) {\n      let crate = document.createElement(\"div\");\n      crate.classList.add(\"crate\");\n      crate.innerHTML = completed[i];\n      document.getElementById(\"main\").appendChild(crate);\n    }\n  }\n\n}\n\nasync function gravity() {\n  while (true) {\n    var crates = document.getElementsByClassName(\"crate\");\n\n    for (var i = 0; i < crates.length; i++) {\n      var topNumber = crates.item(i).style.top.replace('px', '');\n      var top = parseInt(topNumber, 10) - 1;\n      crates.item(i).style.top = top + \"px\";\n    }\n  }\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/VebjÃ¸rn/Documents/Monday/quickstart-react/src/App.js"],"names":["React","createElement","mondaySdk","monday","completed","completed_state","App","Component","constructor","props","state","settings","name","componentDidMount","gravity","listen","res","setState","context","data","api","variables","boardIds","then","boardData","loadCompleted","render","i","boards","j","items","itemName","k","column_values","text","length","createBoxes","crate","document","classList","add","innerHTML","getElementById","appendChild","crates","getElementsByClassName","topNumber","item","style","top","replace","parseInt"],"mappings":"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","sourcesContent":["import React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\n\nconst monday = mondaySdk();\nvar completed = [];\nvar completed_state = \"Done\";\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Default state\n        this.state = {\n            settings: {\n                completed_state: \"Done\"\n            },\n            name: \"\",\n        };\n    }\n\n    componentDidMount() {\n\n        gravity();\n\n        //Load boards listener\n         monday.listen(\"context\", res => {\n            this.setState({context: res.data});\n\n            monday.api(`query ($boardIds: [Int]) { boards (ids:$boardIds) { name items { name column_values { title text } } } }`,\n              { variables: {boardIds: this.state.context.boardIds} }\n            )\n\n            .then(res => {\n                this.setState({boardData: res.data});\n                this.loadCompleted();\n            });\n          })\n\n        // Settings changed listener\n        monday.listen(\"settings\", res => {\n            this.setState({ settings: res.data });\n            completed_state = this.state.settings.completed_state;\n\n             this.loadCompleted();\n        });\n    }\n\n    render() {\n        return <div className=\"App\" id=\"main\"></div>;\n    }\n\n    /** Loads completed items into the completed array */\n    loadCompleted() {\n        completed = [];\n        for (let i in this.state.boardData.boards) {\n            for (let j in this.state.boardData.boards[i].items) {\n\n                var itemName = this.state.boardData.boards[i].items[j].name;\n\n                for (let k in this.state.boardData.boards[i].items[j].column_values) {\n                    if (this.state.boardData.boards[i].items[j].column_values[k].text == completed_state) {\n\n                        completed[completed.length] = itemName;\n                    }\n                }   \n            }\n        }\n        this.createBoxes();\n    }\n\n    /** Creates crates based on data in the completed array */\n    createBoxes() {\n        for (var i in completed) {\n            let crate = document.createElement(\"div\");\n            crate.classList.add(\"crate\");\n            crate.innerHTML = completed[i];\n            document.getElementById(\"main\").appendChild(crate);\n        }\n    }\n}\nasync function gravity() {\n    while (true) {\n        var crates = document.getElementsByClassName(\"crate\");\n        for (var i = 0; i < crates.length; i++) {\n            var topNumber = crates.item(i).style.top.replace('px', '');\n            var top = parseInt(topNumber, 10) - 1;\n            crates.item(i).style.top = top + \"px\";\n        }\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}