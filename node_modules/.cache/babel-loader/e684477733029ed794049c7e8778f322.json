{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vebj\\xF8rn\\\\Documents\\\\Monday\\\\quickstart-react\\\\src\\\\App.js\";\nimport React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\nconst monday = mondaySdk();\nvar completed = [];\nvar completed_state = \"Done\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.state = {\n      settings: {\n        completed_state: \"Done\"\n      },\n      name: \"\"\n    };\n  }\n\n  componentDidMount() {\n    // module aliases\n    var Engine = Matter.Engine,\n        Render = Matter.Render,\n        World = Matter.World,\n        Bodies = Matter.Bodies; // create an engine\n\n    var engine = Engine.create(); // create a renderer\n\n    var render = Render.create({\n      element: document.body,\n      engine: engine\n    }); // create two boxes and a ground\n\n    var boxA = Bodies.rectangle(400, 200, 80, 80);\n    var boxB = Bodies.rectangle(450, 50, 80, 80);\n    var ground = Bodies.rectangle(400, 610, 810, 60, {\n      isStatic: true\n    }); // add all of the bodies to the world\n\n    World.add(engine.world, [boxA, boxB, ground]); // run the engine\n\n    Engine.run(engine); // run the renderer\n\n    Render.run(render); //Load boards listener\n\n    monday.listen(\"context\", res => {\n      this.setState({\n        context: res.data\n      });\n      monday.api(`query ($boardIds: [Int]) { boards (ids:$boardIds) { name items { name column_values { title text } } } }`, {\n        variables: {\n          boardIds: this.state.context.boardIds\n        }\n      }).then(res => {\n        this.setState({\n          boardData: res.data\n        });\n        this.loadCompleted();\n      });\n    }); // Settings changed listener\n\n    monday.listen(\"settings\", res => {\n      this.setState({\n        settings: res.data\n      });\n      completed_state = this.state.settings.completed_state;\n      this.loadCompleted();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      id: \"main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 16\n      }\n    });\n  }\n  /** Loads completed items into the completed array */\n\n\n  loadCompleted() {\n    completed = [];\n\n    for (let i in this.state.boardData.boards) {\n      for (let j in this.state.boardData.boards[i].items) {\n        var itemName = this.state.boardData.boards[i].items[j].name;\n\n        for (let k in this.state.boardData.boards[i].items[j].column_values) {\n          if (this.state.boardData.boards[i].items[j].column_values[k].text == completed_state) {\n            completed[completed.length] = itemName;\n          }\n        }\n      }\n    }\n\n    this.createBoxes();\n  }\n  /** Creates crates based on data in the completed array */\n\n\n  createBoxes() {\n    for (var i in completed) {\n      let crate = document.createElement(\"div\");\n      crate.classList.add(\"crate\");\n      crate.innerHTML = completed[i];\n      document.getElementById(\"main\").appendChild(crate);\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/VebjÃ¸rn/Documents/Monday/quickstart-react/src/App.js"],"names":["React","createElement","mondaySdk","Matter","monday","completed","completed_state","App","Component","constructor","props","state","settings","name","componentDidMount","Engine","Render","World","Bodies","engine","create","render","element","document","body","boxA","rectangle","boxB","ground","isStatic","add","world","run","listen","res","setState","context","data","api","variables","boardIds","then","boardData","loadCompleted","i","boards","j","items","itemName","k","column_values","text","length","createBoxes","crate","classList","innerHTML","getElementById","appendChild"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,MAAMC,MAAM,GAAGF,SAAS,EAAxB;AACA,IAAIG,SAAS,GAAG,EAAhB;AACA,IAAIC,eAAe,GAAG,MAAtB;;AAGA,MAAMC,GAAN,SAAkBP,KAAK,CAACQ,SAAxB,CAAkC;AAC9BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAGf;;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE;AACNN,QAAAA,eAAe,EAAE;AADX,OADD;AAITO,MAAAA,IAAI,EAAE;AAJG,KAAb;AAMH;;AAEDC,EAAAA,iBAAiB,GAAG;AAEhB;AACA,QAAIC,MAAM,GAAGZ,MAAM,CAACY,MAApB;AAAA,QACAC,MAAM,GAAGb,MAAM,CAACa,MADhB;AAAA,QAEAC,KAAK,GAAGd,MAAM,CAACc,KAFf;AAAA,QAGAC,MAAM,GAAGf,MAAM,CAACe,MAHhB,CAHgB,CAQhB;;AACA,QAAIC,MAAM,GAAGJ,MAAM,CAACK,MAAP,EAAb,CATgB,CAWhB;;AACA,QAAIC,MAAM,GAAGL,MAAM,CAACI,MAAP,CAAc;AAC3BE,MAAAA,OAAO,EAAEC,QAAQ,CAACC,IADS;AAE3BL,MAAAA,MAAM,EAAEA;AAFmB,KAAd,CAAb,CAZgB,CAiBhB;;AACA,QAAIM,IAAI,GAAGP,MAAM,CAACQ,SAAP,CAAiB,GAAjB,EAAsB,GAAtB,EAA2B,EAA3B,EAA+B,EAA/B,CAAX;AACA,QAAIC,IAAI,GAAGT,MAAM,CAACQ,SAAP,CAAiB,GAAjB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,CAAX;AACA,QAAIE,MAAM,GAAGV,MAAM,CAACQ,SAAP,CAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,EAAhC,EAAoC;AAAEG,MAAAA,QAAQ,EAAE;AAAZ,KAApC,CAAb,CApBgB,CAsBhB;;AACAZ,IAAAA,KAAK,CAACa,GAAN,CAAUX,MAAM,CAACY,KAAjB,EAAwB,CAACN,IAAD,EAAOE,IAAP,EAAaC,MAAb,CAAxB,EAvBgB,CAyBhB;;AACAb,IAAAA,MAAM,CAACiB,GAAP,CAAWb,MAAX,EA1BgB,CA4BhB;;AACAH,IAAAA,MAAM,CAACgB,GAAP,CAAWX,MAAX,EA7BgB,CA+BhB;;AACCjB,IAAAA,MAAM,CAAC6B,MAAP,CAAc,SAAd,EAAyBC,GAAG,IAAI;AAC7B,WAAKC,QAAL,CAAc;AAACC,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAAd,OAAd;AAEAjC,MAAAA,MAAM,CAACkC,GAAP,CAAY,0GAAZ,EACE;AAAEC,QAAAA,SAAS,EAAE;AAACC,UAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWyB,OAAX,CAAmBI;AAA9B;AAAb,OADF,EAICC,IAJD,CAIMP,GAAG,IAAI;AACT,aAAKC,QAAL,CAAc;AAACO,UAAAA,SAAS,EAAER,GAAG,CAACG;AAAhB,SAAd;AACA,aAAKM,aAAL;AACH,OAPD;AAQD,KAXF,EAhCe,CA6ChB;;AACAvC,IAAAA,MAAM,CAAC6B,MAAP,CAAc,UAAd,EAA0BC,GAAG,IAAI;AAC7B,WAAKC,QAAL,CAAc;AAAEvB,QAAAA,QAAQ,EAAEsB,GAAG,CAACG;AAAhB,OAAd;AACA/B,MAAAA,eAAe,GAAG,KAAKK,KAAL,CAAWC,QAAX,CAAoBN,eAAtC;AAEC,WAAKqC,aAAL;AACJ,KALD;AAMH;;AAEDtB,EAAAA,MAAM,GAAG;AACL,wBAAO;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,EAAE,EAAC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;AAED;;;AACAsB,EAAAA,aAAa,GAAG;AACZtC,IAAAA,SAAS,GAAG,EAAZ;;AACA,SAAK,IAAIuC,CAAT,IAAc,KAAKjC,KAAL,CAAW+B,SAAX,CAAqBG,MAAnC,EAA2C;AACvC,WAAK,IAAIC,CAAT,IAAc,KAAKnC,KAAL,CAAW+B,SAAX,CAAqBG,MAArB,CAA4BD,CAA5B,EAA+BG,KAA7C,EAAoD;AAEhD,YAAIC,QAAQ,GAAG,KAAKrC,KAAL,CAAW+B,SAAX,CAAqBG,MAArB,CAA4BD,CAA5B,EAA+BG,KAA/B,CAAqCD,CAArC,EAAwCjC,IAAvD;;AAEA,aAAK,IAAIoC,CAAT,IAAc,KAAKtC,KAAL,CAAW+B,SAAX,CAAqBG,MAArB,CAA4BD,CAA5B,EAA+BG,KAA/B,CAAqCD,CAArC,EAAwCI,aAAtD,EAAqE;AACjE,cAAI,KAAKvC,KAAL,CAAW+B,SAAX,CAAqBG,MAArB,CAA4BD,CAA5B,EAA+BG,KAA/B,CAAqCD,CAArC,EAAwCI,aAAxC,CAAsDD,CAAtD,EAAyDE,IAAzD,IAAiE7C,eAArE,EAAsF;AAElFD,YAAAA,SAAS,CAACA,SAAS,CAAC+C,MAAX,CAAT,GAA8BJ,QAA9B;AACH;AACJ;AACJ;AACJ;;AACD,SAAKK,WAAL;AACH;AAED;;;AACAA,EAAAA,WAAW,GAAG;AACV,SAAK,IAAIT,CAAT,IAAcvC,SAAd,EAAyB;AACrB,UAAIiD,KAAK,GAAG/B,QAAQ,CAACtB,aAAT,CAAuB,KAAvB,CAAZ;AACAqD,MAAAA,KAAK,CAACC,SAAN,CAAgBzB,GAAhB,CAAoB,OAApB;AACAwB,MAAAA,KAAK,CAACE,SAAN,GAAkBnD,SAAS,CAACuC,CAAD,CAA3B;AACArB,MAAAA,QAAQ,CAACkC,cAAT,CAAwB,MAAxB,EAAgCC,WAAhC,CAA4CJ,KAA5C;AACH;AACJ;;AAlG6B;;AAqGlC,eAAe/C,GAAf","sourcesContent":["import React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\n\nconst monday = mondaySdk();\nvar completed = [];\nvar completed_state = \"Done\";\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Default state\n        this.state = {\n            settings: {\n                completed_state: \"Done\"\n            },\n            name: \"\",\n        };\n    }\n\n    componentDidMount() {\n\n        // module aliases\n        var Engine = Matter.Engine,\n        Render = Matter.Render,\n        World = Matter.World,\n        Bodies = Matter.Bodies;\n\n        // create an engine\n        var engine = Engine.create();\n\n        // create a renderer\n        var render = Render.create({\n        element: document.body,\n        engine: engine\n        });\n\n        // create two boxes and a ground\n        var boxA = Bodies.rectangle(400, 200, 80, 80);\n        var boxB = Bodies.rectangle(450, 50, 80, 80);\n        var ground = Bodies.rectangle(400, 610, 810, 60, { isStatic: true });\n\n        // add all of the bodies to the world\n        World.add(engine.world, [boxA, boxB, ground]);\n\n        // run the engine\n        Engine.run(engine);\n\n        // run the renderer\n        Render.run(render);\n\n        //Load boards listener\n         monday.listen(\"context\", res => {\n            this.setState({context: res.data});\n\n            monday.api(`query ($boardIds: [Int]) { boards (ids:$boardIds) { name items { name column_values { title text } } } }`,\n              { variables: {boardIds: this.state.context.boardIds} }\n            )\n\n            .then(res => {\n                this.setState({boardData: res.data});\n                this.loadCompleted();\n            });\n          })\n\n        // Settings changed listener\n        monday.listen(\"settings\", res => {\n            this.setState({ settings: res.data });\n            completed_state = this.state.settings.completed_state;\n\n             this.loadCompleted();\n        });\n    }\n\n    render() {\n        return <div className=\"App\" id=\"main\"></div>;\n    }\n\n    /** Loads completed items into the completed array */\n    loadCompleted() {\n        completed = [];\n        for (let i in this.state.boardData.boards) {\n            for (let j in this.state.boardData.boards[i].items) {\n\n                var itemName = this.state.boardData.boards[i].items[j].name;\n\n                for (let k in this.state.boardData.boards[i].items[j].column_values) {\n                    if (this.state.boardData.boards[i].items[j].column_values[k].text == completed_state) {\n\n                        completed[completed.length] = itemName;\n                    }\n                }   \n            }\n        }\n        this.createBoxes();\n    }\n\n    /** Creates crates based on data in the completed array */\n    createBoxes() {\n        for (var i in completed) {\n            let crate = document.createElement(\"div\");\n            crate.classList.add(\"crate\");\n            crate.innerHTML = completed[i];\n            document.getElementById(\"main\").appendChild(crate);\n        }\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}