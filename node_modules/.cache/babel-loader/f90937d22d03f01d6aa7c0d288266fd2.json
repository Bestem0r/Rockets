{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vebj\\xF8rn\\\\Documents\\\\Monday\\\\quickstart-react\\\\src\\\\App.js\";\nimport React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\nconst monday = mondaySdk();\nvar completedNames = [];\nvar completedIDs = [];\nvar completed_state = \"Done\"; // module aliases\n\nvar Engine = Matter.Engine,\n    Render = Matter.Render,\n    World = Matter.World,\n    Bodies = Matter.Bodies,\n    Events = Matter.Events,\n    MouseConstraint = Matter.MouseConstraint,\n    Mouse = Matter.Mouse;\nvar engine, render;\nvar crates = [];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.state = {\n      settings: {\n        completed_state: \"Done\"\n      },\n      name: \"\"\n    };\n  }\n\n  componentDidMount() {\n    engine = Engine.create(); // create a renderer\n\n    render = Render.create({\n      element: this.refs.launch_site,\n      engine: engine,\n      options: {\n        wireframes: false,\n        background: '#fff',\n        width: window.innerWidth,\n        height: window.innerHeight - 100\n      }\n    });\n    render.options.wireframes = false;\n    var ground = Bodies.rectangle(window.innerWidth / 2 - 250, window.innerHeight - 100, window.innerWidth + 500, 20, {\n      isStatic: true,\n      render: {\n        fillStyle: '#fff'\n      }\n    });\n    var mouse = Mouse.create(render.canvas),\n        mouseConstraint = MouseConstraint.create(engine, {\n      mouse: mouse,\n      constraint: {\n        stiffness: 0.2,\n        render: {\n          visible: false\n        }\n      }\n    });\n    World.add(engine.world, [ground, mouseConstraint]);\n    Engine.run(engine);\n    Render.run(render);\n    Events.on(engine, 'tick', function (event) {\n      var mousePosition = mouse.position;\n      var cratesUnderMouse = Matter.Query.point(crates, {\n        x: mousePosition.x,\n        y: mousePosition.y\n      });\n      const label = document.getElementById(\"hover_label\");\n\n      if (cratesUnderMouse.length > 0) {\n        let crate = cratesUnderMouse[0];\n        label.innerHTML = crate.id;\n        let labelHeight = label.clientHeight + 1;\n        let labelWidth = label.clientWidth + 1;\n        label.style.top = crate.position.y - 2 - labelHeight + \"px\";\n        label.style.left = crate.position.x - labelWidth / 2 + \"px\";\n        label.style.opacity = 1;\n      } else {\n        label.style.opacity = 0;\n      }\n    }); //Load boards listener\n\n    monday.listen(\"context\", res => {\n      this.setState({\n        context: res.data\n      });\n      this.loadCompletedItems();\n    }); // Settings changed listener\n\n    monday.listen(\"settings\", res => {\n      this.setState({\n        settings: res.data\n      });\n      completed_state = this.state.settings.completed_state;\n      this.loadCompletedItems();\n    });\n  }\n\n  loadCompletedItems() {\n    completedNames = [];\n    completedIDs = [];\n    monday.api(`query { items_by_column_values (board_id: 857811628, column_id: \"status\", column_value: \"Done\") { name id } }`).then(res => {\n      for (let i in res.data.items_by_column_values) {\n        completedNames[completedNames.length] = res.data.items_by_column_values[i].name;\n        completedIDs[completedIDs.length] = res.data.items_by_column_values[i].id;\n      }\n\n      this.createBoxes();\n      document.getElementById(\"title\").innerHTML = completedNames.length + \" items ready to launch!\";\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      ref: \"launch_site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"hover_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, \"Hover\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"launchDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"launchTitle\",\n      id: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: launch,\n      className: \"launchButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }, \"Launch now\")));\n  }\n  /** Creates crates based on data in the completedNames array */\n\n\n  createBoxes() {\n    for (let i in crates) {\n      World.remove(engine.world, crates[i]);\n    }\n\n    crates = [];\n\n    for (let i in completedNames) {\n      let x = getRandomInt(200, 800);\n      let y = getRandomInt(50, 400);\n      let size = getRandomInt(50, 70);\n      let spriteNumber = getRandomInt(1, 8);\n      let crate = Bodies.rectangle(x, y, size, size, {\n        render: {\n          sprite: {\n            texture: \"/sprites/crates/crate_\" + spriteNumber + \".png\",\n            xScale: size / 475,\n            yScale: size / 475\n          }\n        },\n        id: completedNames[i]\n      });\n      World.add(engine.world, [crate]);\n      crates[crates.length] = crate;\n    }\n  }\n\n}\n\nfunction launch() {\n  for (let i in completedIDs) {\n    let itemID = completedIDs[i];\n    monday.api(`mutation ($itemID: Int) { delete_item (item_id: 869977372) { id } }\n        `, {\n      variables: {\n        itemID: itemID\n      }\n    }).then(res => {\n      alert(\"deleted!\" + res.data.id);\n    });\n  }\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Vebj√∏rn/Documents/Monday/quickstart-react/src/App.js"],"names":["React","createElement","mondaySdk","Matter","monday","completedNames","completedIDs","completed_state","Engine","Render","World","Bodies","Events","MouseConstraint","Mouse","engine","render","crates","App","Component","constructor","props","state","settings","name","componentDidMount","create","element","refs","launch_site","options","wireframes","background","width","window","innerWidth","height","innerHeight","ground","rectangle","isStatic","fillStyle","mouse","canvas","mouseConstraint","constraint","stiffness","visible","add","world","run","on","event","mousePosition","position","cratesUnderMouse","Query","point","x","y","label","document","getElementById","length","crate","innerHTML","id","labelHeight","clientHeight","labelWidth","clientWidth","style","top","left","opacity","listen","res","setState","context","data","loadCompletedItems","api","then","i","items_by_column_values","createBoxes","launch","remove","getRandomInt","size","spriteNumber","sprite","texture","xScale","yScale","itemID","variables","alert","min","max","Math","ceil","floor","random"],"mappings":"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","sourcesContent":["import React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\n\nconst monday = mondaySdk();\nvar completedNames = [];\nvar completedIDs = [];\nvar completed_state = \"Done\";\n\n// module aliases\nvar Engine = Matter.Engine,\nRender = Matter.Render,\nWorld = Matter.World,\nBodies = Matter.Bodies,\nEvents = Matter.Events,\nMouseConstraint = Matter.MouseConstraint,\nMouse = Matter.Mouse;\n\nvar engine,\nrender;\n\nvar crates = [];\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Default state\n        this.state = {\n            settings: {\n                completed_state: \"Done\"\n            },\n            name: \"\",\n        };\n    }\n\n    componentDidMount() {\n\n        engine = Engine.create();\n\n        // create a renderer\n        render = Render.create({\n            element: this.refs.launch_site,\n            engine: engine,\n            options: {\n                wireframes: false,\n                background: '#fff',\n                width: window.innerWidth,\n                height: window.innerHeight - 100\n            }\n        });\n        render.options.wireframes = false;\n\n        var ground = Bodies.rectangle(window.innerWidth / 2 - 250, window.innerHeight - 100, window.innerWidth + 500, 20, { \n            isStatic: true,\n            render: { fillStyle: '#fff' }\n        });\n\n        var mouse = Mouse.create(render.canvas),\n        mouseConstraint = MouseConstraint.create(engine, {\n            mouse: mouse,\n            constraint: {\n                stiffness: 0.2,\n                render: {\n                    visible: false\n                }\n            }\n        });\n\n        World.add(engine.world, [ground, mouseConstraint]);\n        Engine.run(engine);\n        Render.run(render);\n    \n        Events.on(engine, 'tick', function(event) {\n            var mousePosition = mouse.position;\n            var cratesUnderMouse = Matter.Query.point(crates, {x: mousePosition.x, y: mousePosition.y});\n            \n            const label = document.getElementById(\"hover_label\");\n            if (cratesUnderMouse.length > 0) {\n                let crate = cratesUnderMouse[0];\n                label.innerHTML = crate.id;\n                let labelHeight = (label.clientHeight + 1);\n                let labelWidth = (label.clientWidth + 1);\n                label.style.top = crate.position.y - 2 - labelHeight + \"px\";\n                label.style.left = crate.position.x - labelWidth / 2 + \"px\";\n                label.style.opacity = 1;\n            } else {\n                label.style.opacity = 0;\n            }\n        });\n\n        //Load boards listener\n         monday.listen(\"context\", res => {\n            this.setState({context: res.data});\n            this.loadCompletedItems();\n          })\n\n        // Settings changed listener\n        monday.listen(\"settings\", res => {\n            this.setState({ settings: res.data });\n            completed_state = this.state.settings.completed_state;\n            this.loadCompletedItems();\n        });\n    }\n\n    loadCompletedItems() {\n        completedNames = [];\n        completedIDs = [];\n        monday.api(`query { items_by_column_values (board_id: 857811628, column_id: \"status\", column_value: \"Done\") { name id } }`)\n            .then(res => {\n                for (let i in res.data.items_by_column_values) {\n                    completedNames[completedNames.length] = res.data.items_by_column_values[i].name;\n                    completedIDs[completedIDs.length] = res.data.items_by_column_values[i].id;\n                }\n            this.createBoxes();\n            document.getElementById(\"title\").innerHTML = completedNames.length + \" items ready to launch!\";\n        });\n    }\n\n    render() {\n        return <div className=\"App\" ref=\"launch_site\">\n            <p id=\"hover_label\">Hover</p>\n            <div className=\"launchDiv\">\n                <p className=\"launchTitle\" id=\"title\"></p>\n                <button onClick={launch} className=\"launchButton\">Launch now</button>\n            </div>\n        </div>;\n    }\n\n    /** Creates crates based on data in the completedNames array */\n    createBoxes() {\n        for (let i in crates) {\n            World.remove(engine.world, crates[i]);\n        }\n        crates = [];\n        for (let i in completedNames) {\n\n            let x = getRandomInt(200, 800);\n            let y = getRandomInt(50, 400);\n            let size = getRandomInt(50, 70);\n\n            let spriteNumber = getRandomInt(1, 8);\n\n            let crate = Bodies.rectangle(x, y, size, size, {\n                render: {\n                    sprite: {\n                        texture: \"/sprites/crates/crate_\" + spriteNumber + \".png\",\n                        xScale: size / 475,\n                        yScale: size / 475\n                    }\n                },\n                id: completedNames [i]\n            });\n            \n            World.add(engine.world, [crate]);\n            crates[crates.length] = crate;\n            \n        }\n    }\n}\n\nfunction launch() {\n    for (let i in completedIDs) {\n        let itemID = completedIDs[i];\n        monday.api(`mutation ($itemID: Int) { delete_item (item_id: 869977372) { id } }\n        `, {\n            variables: {itemID : itemID } }\n        )\n\n        .then(res => {\n           alert(\"deleted!\" + res.data.id) \n        });\n    }\n    \n}\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}