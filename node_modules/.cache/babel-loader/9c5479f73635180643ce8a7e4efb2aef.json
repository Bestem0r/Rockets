{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vebj\\xF8rn\\\\Documents\\\\Monday\\\\quickstart-react\\\\src\\\\App.js\";\nimport React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\nconst monday = mondaySdk();\nvar completed = [];\nvar completed_state = \"Done\";\nvar move = false; // module aliases\n\nvar Engine = Matter.Engine,\n    Render = Matter.Render,\n    World = Matter.World,\n    Bodies = Matter.Bodies,\n    Body = Matter.Body,\n    Events = Matter.Events,\n    MouseConstraint = Matter.MouseConstraint,\n    Mouse = Matter.Mouse;\nvar engine;\nvar render;\nvar crates = [];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.state = {\n      settings: {\n        completed_state: \"Done\"\n      },\n      name: \"\"\n    };\n  }\n\n  componentDidMount() {\n    engine = Engine.create(); // create a renderer\n\n    render = Render.create({\n      element: this.refs.launch_site,\n      engine: engine,\n      options: {\n        hasBounds: true,\n        wireframes: false,\n        background: '#fff',\n        showIds: true,\n        width: window.innerWidth,\n        height: window.innerHeight - 100\n      }\n    });\n    var ground = Bodies.rectangle(window.innerWidth / 2, window.innerHeight - 100, window.innerWidth, 20, {\n      isStatic: true,\n      render: {\n        fillStyle: '#fff'\n      }\n    });\n    var mouse = Mouse.create(render.canvas),\n        mouseConstraint = MouseConstraint.create(engine, {\n      mouse: mouse,\n      constraint: {\n        stiffness: 0.2,\n        render: {\n          visible: false\n        }\n      }\n    });\n    World.add(engine.world, [ground, mouseConstraint]);\n    Engine.run(engine);\n    Render.run(render); // an example of using mouse events on a mouse\n\n    Events.on(mouseConstraint, 'mousedown', function (event) {\n      var mousePosition = event.mouse.position;\n    });\n    let pct = 0;\n    Events.on(engine, \"beforeUpdate\", function (event) {\n      if (move && pct < 101) {\n        for (let i in crates) {\n          let crate = crates[i];\n          forceMove(crate, 800, 50, 1);\n        }\n\n        pct = pct + 1;\n      }\n    }); //Load boards listener\n\n    monday.listen(\"context\", res => {\n      this.setState({\n        context: res.data\n      });\n      monday.api(`query ($boardIds: [Int]) { boards (ids:$boardIds) { name items { name column_values { title text } } } }`, {\n        variables: {\n          boardIds: this.state.context.boardIds\n        }\n      }).then(res => {\n        this.setState({\n          boardData: res.data\n        });\n        this.loadCompleted();\n      });\n    }); // Settings changed listener\n\n    monday.listen(\"settings\", res => {\n      this.setState({\n        settings: res.data\n      });\n      completed_state = this.state.settings.completed_state;\n      this.loadCompleted();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      ref: \"launch_site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: moveCrates,\n      className: \"launchButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, \"Launch now\"));\n  }\n  /** Loads completed items into the completed array */\n\n\n  loadCompleted() {\n    completed = [];\n\n    for (let i in this.state.boardData.boards) {\n      for (let j in this.state.boardData.boards[i].items) {\n        var itemName = this.state.boardData.boards[i].items[j].name;\n\n        for (let k in this.state.boardData.boards[i].items[j].column_values) {\n          if (this.state.boardData.boards[i].items[j].column_values[k].text == completed_state) {\n            completed[completed.length] = itemName;\n          }\n        }\n      }\n    }\n\n    this.createBoxes();\n  }\n  /** Creates crates based on data in the completed array */\n\n\n  createBoxes() {\n    for (let i in completed) {\n      let x = getRandomNumber(200, 400);\n      let y = getRandomNumber(50, 400);\n      let size = getRandomNumber(50, 80);\n      let crate = Bodies.rectangle(x, y, size, size, {\n        id: completed[i]\n      });\n      World.add(engine.world, [crate]);\n      crates[crates.length] = crate;\n    }\n  }\n\n}\n\nfunction getRandomNumber(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nfunction moveCrates() {\n  move = true;\n}\n\nfunction forceMove(body, endX, endY, pct) {\n  // dx is the total distance to move in the X direction\n  let dx = endX - body.position.x; // dy is the total distance to move in the Y direction\n\n  let dy = endY - body.position.y; // use dx & dy to calculate where the current [x,y] is at a given pct\n\n  let x = body.position.x + dx * pct / 100;\n  let y = body.position.y + dy * pct / 100;\n  Body.setPosition(body, {\n    x: x,\n    y: y\n  });\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Vebj√∏rn/Documents/Monday/quickstart-react/src/App.js"],"names":["React","createElement","mondaySdk","Matter","monday","completed","completed_state","move","Engine","Render","World","Bodies","Body","Events","MouseConstraint","Mouse","engine","render","crates","App","Component","constructor","props","state","settings","name","componentDidMount","create","element","refs","launch_site","options","hasBounds","wireframes","background","showIds","width","window","innerWidth","height","innerHeight","ground","rectangle","isStatic","fillStyle","mouse","canvas","mouseConstraint","constraint","stiffness","visible","add","world","run","on","event","mousePosition","position","pct","i","crate","forceMove","listen","res","setState","context","data","api","variables","boardIds","then","boardData","loadCompleted","moveCrates","boards","j","items","itemName","k","column_values","text","length","createBoxes","x","getRandomNumber","y","size","id","min","max","Math","random","body","endX","endY","dx","dy","setPosition"],"mappings":"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","sourcesContent":["import React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\n\nconst monday = mondaySdk();\nvar completed = [];\nvar completed_state = \"Done\";\n\nvar move = false;\n\n\n// module aliases\nvar Engine = Matter.Engine,\nRender = Matter.Render,\nWorld = Matter.World,\nBodies = Matter.Bodies,\nBody = Matter.Body,\nEvents = Matter.Events,\nMouseConstraint = Matter.MouseConstraint,\nMouse = Matter.Mouse;\n\nvar engine;\nvar render;\n\nvar crates = [];\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Default state\n        this.state = {\n            settings: {\n                completed_state: \"Done\"\n            },\n            name: \"\",\n        };\n    }\n\n    componentDidMount() {\n\n        engine = Engine.create();\n\n        // create a renderer\n        render = Render.create({\n            element: this.refs.launch_site,\n            engine: engine,\n            options: {\n                hasBounds: true,\n                wireframes: false,\n                background: '#fff',\n                showIds: true,\n                width: window.innerWidth,\n                height: window.innerHeight - 100\n            }\n        });\n        var ground = Bodies.rectangle(window.innerWidth / 2, window.innerHeight - 100, window.innerWidth, 20, { \n            isStatic: true,\n            render: { fillStyle: '#fff' }\n        });\n\n        var mouse = Mouse.create(render.canvas),\n        mouseConstraint = MouseConstraint.create(engine, {\n            mouse: mouse,\n            constraint: {\n                stiffness: 0.2,\n                render: {\n                    visible: false\n                }\n            }\n        });\n\n        World.add(engine.world, [ground, mouseConstraint]);\n        Engine.run(engine);\n        Render.run(render);\n\n\n        // an example of using mouse events on a mouse\n        Events.on(mouseConstraint, 'mousedown', function(event) {\n            var mousePosition = event.mouse.position;\n        });\n\n        let pct = 0;\n        Events.on(engine, \"beforeUpdate\", function (event) {\n            if (move && pct < 101) {\n                for (let i in crates) {\n                    let crate = crates[i];\n                    forceMove(crate, 800, 50, 1);\n                }\n                pct = pct + 1;\n            }\n        });\n\n        //Load boards listener\n         monday.listen(\"context\", res => {\n            this.setState({context: res.data});\n\n            monday.api(`query ($boardIds: [Int]) { boards (ids:$boardIds) { name items { name column_values { title text } } } }`,\n              { variables: {boardIds: this.state.context.boardIds} }\n            )\n\n            .then(res => {\n                this.setState({boardData: res.data});\n                this.loadCompleted();\n            });\n          })\n\n        // Settings changed listener\n        monday.listen(\"settings\", res => {\n            this.setState({ settings: res.data });\n            completed_state = this.state.settings.completed_state;\n\n             this.loadCompleted();\n        });\n    }\n\n    render() {\n        return <div className=\"App\" ref=\"launch_site\">\n            <button onClick={moveCrates} className=\"launchButton\">Launch now</button>\n        </div>;\n    }\n\n    /** Loads completed items into the completed array */\n    loadCompleted() {\n        completed = [];\n        for (let i in this.state.boardData.boards) {\n            for (let j in this.state.boardData.boards[i].items) {\n\n                var itemName = this.state.boardData.boards[i].items[j].name;\n\n                for (let k in this.state.boardData.boards[i].items[j].column_values) {\n                    if (this.state.boardData.boards[i].items[j].column_values[k].text == completed_state) {\n\n                        completed[completed.length] = itemName;\n                    }\n                }   \n            }\n        }\n        this.createBoxes();\n    }\n\n    /** Creates crates based on data in the completed array */\n    createBoxes() {\n        for (let i in completed) {\n\n            let x = getRandomNumber(200, 400);\n            let y = getRandomNumber(50, 400);\n            let size = getRandomNumber(50, 80);\n\n            let crate = Bodies.rectangle(x, y, size, size, {\n                id: completed[i]\n            });\n            \n            World.add(engine.world, [crate]);\n            crates[crates.length] = crate;\n        }\n    }\n}\n\nfunction getRandomNumber(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nfunction moveCrates() {\n    move = true;\n}\n\nfunction forceMove(body, endX, endY, pct) {\n    // dx is the total distance to move in the X direction\n    let dx = endX - body.position.x;\n\n    // dy is the total distance to move in the Y direction\n    let dy = endY - body.position.y;\n\n    // use dx & dy to calculate where the current [x,y] is at a given pct\n    let x = body.position.x + (dx * pct) / 100;\n    let y = body.position.y + (dy * pct) / 100;\n\n    Body.setPosition(body, {\n        x: x,\n        y: y\n    });\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}