{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vebj\\xF8rn\\\\Documents\\\\Monday\\\\quickstart-react\\\\src\\\\App.js\";\nimport React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter, { Events, Runner } from \"matter-js\";\nconst monday = mondaySdk();\nvar completed = [];\nvar completed_state = \"Done\"; // module aliases\n\nvar Engine = Matter.Engine,\n    Render = Matter.Render,\n    World = Matter.World,\n    Bodies = Matter.Bodies;\nEvents = Matter.Events;\nvar engine;\nvar render;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.state = {\n      settings: {\n        completed_state: \"Done\"\n      },\n      name: \"\"\n    };\n  }\n\n  componentDidMount() {\n    // create an engine\n    // create a renderer\n    render = Render.create({\n      element: this.refs.launch_site,\n      engine: engine,\n      options: {\n        hasBounds: true,\n        wireframes: false,\n        background: '#fff',\n        showIds: true,\n        width: window.innerWidth,\n        height: window.innerHeight - 100\n      }\n    });\n    var ground = Bodies.rectangle(window.innerWidth / 2, window.innerHeight - 100, window.innerWidth, 20, {\n      isStatic: true,\n      render: {\n        fillStyle: '#fff'\n      }\n    });\n    World.add(engine.world, [ground]);\n    Engine.run(engine);\n    Render.run(render); // an example of using mouse events on a mouse\n\n    Events.on(mouseConstraint, 'mousedown', function (event) {\n      var mousePosition = event.mouse.position;\n      alert(mousePosition.x + \" \" + mousePosition.y);\n    }); //Load boards listener\n\n    monday.listen(\"context\", res => {\n      this.setState({\n        context: res.data\n      });\n      monday.api(`query ($boardIds: [Int]) { boards (ids:$boardIds) { name items { name column_values { title text } } } }`, {\n        variables: {\n          boardIds: this.state.context.boardIds\n        }\n      }).then(res => {\n        this.setState({\n          boardData: res.data\n        });\n        this.loadCompleted();\n      });\n    }); // Settings changed listener\n\n    monday.listen(\"settings\", res => {\n      this.setState({\n        settings: res.data\n      });\n      completed_state = this.state.settings.completed_state;\n      this.loadCompleted();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      ref: \"launch_site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 16\n      }\n    });\n  }\n  /** Loads completed items into the completed array */\n\n\n  loadCompleted() {\n    completed = [];\n\n    for (let i in this.state.boardData.boards) {\n      for (let j in this.state.boardData.boards[i].items) {\n        var itemName = this.state.boardData.boards[i].items[j].name;\n\n        for (let k in this.state.boardData.boards[i].items[j].column_values) {\n          if (this.state.boardData.boards[i].items[j].column_values[k].text == completed_state) {\n            completed[completed.length] = itemName;\n          }\n        }\n      }\n    }\n\n    this.createBoxes();\n  }\n  /** Creates crates based on data in the completed array */\n\n\n  createBoxes() {\n    for (var i in completed) {\n      let x = getRandomNumber(200, 400);\n      let y = getRandomNumber(50, 400);\n      let size = getRandomNumber(50, 80);\n      let boxA = Bodies.rectangle(x, y, size, size, {\n        url: \"https://www.phone.com\"\n      });\n      World.add(engine.world, [boxA]);\n    }\n  }\n\n}\n\nfunction getRandomNumber(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Vebj√∏rn/Documents/Monday/quickstart-react/src/App.js"],"names":["React","createElement","mondaySdk","Matter","Events","Runner","monday","completed","completed_state","Engine","Render","World","Bodies","engine","render","App","Component","constructor","props","state","settings","name","componentDidMount","create","element","refs","launch_site","options","hasBounds","wireframes","background","showIds","width","window","innerWidth","height","innerHeight","ground","rectangle","isStatic","fillStyle","add","world","run","on","mouseConstraint","event","mousePosition","mouse","position","alert","x","y","listen","res","setState","context","data","api","variables","boardIds","then","boardData","loadCompleted","i","boards","j","items","itemName","k","column_values","text","length","createBoxes","getRandomNumber","size","boxA","url","min","max","Math","random"],"mappings":"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","sourcesContent":["import React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter, { Events, Runner } from \"matter-js\";\n\nconst monday = mondaySdk();\nvar completed = [];\nvar completed_state = \"Done\";\n\n\n// module aliases\nvar Engine = Matter.Engine,\nRender = Matter.Render,\nWorld = Matter.World,\nBodies = Matter.Bodies;\nEvents = Matter.Events;\n\nvar engine;\nvar render;\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Default state\n        this.state = {\n            settings: {\n                completed_state: \"Done\"\n            },\n            name: \"\",\n        };\n    }\n\n    componentDidMount() {\n\n        // create an engine\n\n        // create a renderer\n        render = Render.create({\n            element: this.refs.launch_site,\n            engine: engine,\n            options: {\n                hasBounds: true,\n                wireframes: false,\n                background: '#fff',\n                showIds: true,\n                width: window.innerWidth,\n                height: window.innerHeight - 100\n            }\n        });\n        var ground = Bodies.rectangle(window.innerWidth / 2, window.innerHeight - 100, window.innerWidth, 20, { \n            isStatic: true,\n            render: { fillStyle: '#fff' }\n        });\n\n        World.add(engine.world, [ground]);\n        Engine.run(engine);\n        Render.run(render);\n\n        // an example of using mouse events on a mouse\n        Events.on(mouseConstraint, 'mousedown', function(event) {\n            var mousePosition = event.mouse.position;\n            alert(mousePosition.x + \" \" + mousePosition.y);\n        });\n\n        //Load boards listener\n         monday.listen(\"context\", res => {\n            this.setState({context: res.data});\n\n            monday.api(`query ($boardIds: [Int]) { boards (ids:$boardIds) { name items { name column_values { title text } } } }`,\n              { variables: {boardIds: this.state.context.boardIds} }\n            )\n\n            .then(res => {\n                this.setState({boardData: res.data});\n                this.loadCompleted();\n            });\n          })\n\n        // Settings changed listener\n        monday.listen(\"settings\", res => {\n            this.setState({ settings: res.data });\n            completed_state = this.state.settings.completed_state;\n\n             this.loadCompleted();\n        });\n    }\n\n    render() {\n        return <div className=\"App\" ref=\"launch_site\"></div>;\n    }\n\n    /** Loads completed items into the completed array */\n    loadCompleted() {\n        completed = [];\n        for (let i in this.state.boardData.boards) {\n            for (let j in this.state.boardData.boards[i].items) {\n\n                var itemName = this.state.boardData.boards[i].items[j].name;\n\n                for (let k in this.state.boardData.boards[i].items[j].column_values) {\n                    if (this.state.boardData.boards[i].items[j].column_values[k].text == completed_state) {\n\n                        completed[completed.length] = itemName;\n                    }\n                }   \n            }\n        }\n        this.createBoxes();\n    }\n\n    /** Creates crates based on data in the completed array */\n    createBoxes() {\n        for (var i in completed) {\n\n            let x = getRandomNumber(200, 400);\n            let y = getRandomNumber(50, 400);\n            let size = getRandomNumber(50, 80);\n\n            let boxA = Bodies.rectangle(x, y, size, size, {\n                url: \"https://www.phone.com\"\n            });\n            World.add(engine.world, [boxA]);\n        }\n    }\n}\n\nfunction getRandomNumber(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}