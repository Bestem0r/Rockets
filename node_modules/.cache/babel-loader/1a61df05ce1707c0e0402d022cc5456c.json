{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vebj\\xF8rn\\\\Documents\\\\Monday\\\\quickstart-react\\\\src\\\\App.js\";\nimport React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\nconst monday = mondaySdk();\nvar completed = [];\nvar completed_state = \"Done\"; // module aliases\n\nvar Engine = Matter.Engine,\n    Render = Matter.Render,\n    World = Matter.World,\n    Bodies = Matter.Bodies;\nvar engine;\nvar render;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.state = {\n      settings: {\n        completed_state: \"Done\"\n      },\n      name: \"\"\n    };\n  }\n\n  componentDidMount() {\n    // create an engine\n    engine = Engine.create(); // create a renderer\n\n    render = Render.create({\n      element: this.refs.launch_site,\n      engine: engine,\n      options: {\n        width: 800,\n        height: 600,\n        pixelRatio: 1,\n        background: '#aaaaaa',\n        hasBounds: true,\n        showIds: false\n      }\n    }); // create two boxes and a ground\n\n    var ground = Bodies.rectangle(400, 610, 810, 60, {\n      isStatic: true\n    }); // add all of the bodies to the world\n\n    World.add(engine.world, [ground]); // run the engine\n\n    Engine.run(engine); // run the renderer\n\n    Render.run(render); //Load boards listener\n\n    monday.listen(\"context\", res => {\n      this.setState({\n        context: res.data\n      });\n      monday.api(`query ($boardIds: [Int]) { boards (ids:$boardIds) { name items { name column_values { title text } } } }`, {\n        variables: {\n          boardIds: this.state.context.boardIds\n        }\n      }).then(res => {\n        this.setState({\n          boardData: res.data\n        });\n        this.loadCompleted();\n      });\n    }); // Settings changed listener\n\n    monday.listen(\"settings\", res => {\n      this.setState({\n        settings: res.data\n      });\n      completed_state = this.state.settings.completed_state;\n      this.loadCompleted();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      ref: \"launch_site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 16\n      }\n    });\n  }\n  /** Loads completed items into the completed array */\n\n\n  loadCompleted() {\n    completed = [];\n\n    for (let i in this.state.boardData.boards) {\n      for (let j in this.state.boardData.boards[i].items) {\n        var itemName = this.state.boardData.boards[i].items[j].name;\n\n        for (let k in this.state.boardData.boards[i].items[j].column_values) {\n          if (this.state.boardData.boards[i].items[j].column_values[k].text == completed_state) {\n            completed[completed.length] = itemName;\n          }\n        }\n      }\n    }\n\n    this.createBoxes();\n  }\n  /** Creates crates based on data in the completed array */\n\n\n  createBoxes() {\n    for (var i in completed) {\n      let x = getRandomNumber(0, 400);\n      let y = getRandomNumber(50, 400);\n      let size = getRandomNumber(50, 80);\n      let boxA = Bodies.rectangle(x, y, size, size);\n      World.add(engine.world, [boxA]);\n    }\n  }\n\n}\n\nfunction getRandomNumber(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/VebjÃ¸rn/Documents/Monday/quickstart-react/src/App.js"],"names":["React","createElement","mondaySdk","Matter","monday","completed","completed_state","Engine","Render","World","Bodies","engine","render","App","Component","constructor","props","state","settings","name","componentDidMount","create","element","refs","launch_site","options","width","height","pixelRatio","background","hasBounds","showIds","ground","rectangle","isStatic","add","world","run","listen","res","setState","context","data","api","variables","boardIds","then","boardData","loadCompleted","i","boards","j","items","itemName","k","column_values","text","length","createBoxes","x","getRandomNumber","y","size","boxA","min","max","Math","random"],"mappings":"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","sourcesContent":["import React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\n\nconst monday = mondaySdk();\nvar completed = [];\nvar completed_state = \"Done\";\n\n\n// module aliases\nvar Engine = Matter.Engine,\nRender = Matter.Render,\nWorld = Matter.World,\nBodies = Matter.Bodies;\n\nvar engine;\nvar render;\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Default state\n        this.state = {\n            settings: {\n                completed_state: \"Done\"\n            },\n            name: \"\",\n        };\n    }\n\n    componentDidMount() {\n\n        // create an engine\n        engine = Engine.create();\n\n        // create a renderer\n        render = Render.create({\n            element: this.refs.launch_site,\n            engine: engine,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#aaaaaa',\n                hasBounds: true,\n                showIds: false,\n            }\n        });\n\n        // create two boxes and a ground\n        var ground = Bodies.rectangle(400, 610, 810, 60, { isStatic: true });\n\n        // add all of the bodies to the world\n        World.add(engine.world, [ground]);\n\n        // run the engine\n        Engine.run(engine);\n\n        // run the renderer\n        Render.run(render);\n\n\n        //Load boards listener\n         monday.listen(\"context\", res => {\n            this.setState({context: res.data});\n\n            monday.api(`query ($boardIds: [Int]) { boards (ids:$boardIds) { name items { name column_values { title text } } } }`,\n              { variables: {boardIds: this.state.context.boardIds} }\n            )\n\n            .then(res => {\n                this.setState({boardData: res.data});\n                this.loadCompleted();\n            });\n          })\n\n        // Settings changed listener\n        monday.listen(\"settings\", res => {\n            this.setState({ settings: res.data });\n            completed_state = this.state.settings.completed_state;\n\n             this.loadCompleted();\n        });\n    }\n\n    render() {\n        return <div className=\"App\" ref=\"launch_site\"></div>;\n    }\n\n    /** Loads completed items into the completed array */\n    loadCompleted() {\n        completed = [];\n        for (let i in this.state.boardData.boards) {\n            for (let j in this.state.boardData.boards[i].items) {\n\n                var itemName = this.state.boardData.boards[i].items[j].name;\n\n                for (let k in this.state.boardData.boards[i].items[j].column_values) {\n                    if (this.state.boardData.boards[i].items[j].column_values[k].text == completed_state) {\n\n                        completed[completed.length] = itemName;\n                    }\n                }   \n            }\n        }\n        this.createBoxes();\n    }\n\n    /** Creates crates based on data in the completed array */\n    createBoxes() {\n        for (var i in completed) {\n\n            let x = getRandomNumber(0, 400);\n            let y = getRandomNumber(50, 400);\n            let size = getRandomNumber(50, 80);\n\n            let boxA = Bodies.rectangle(x, y, size, size);\n            World.add(engine.world, [boxA]);\n        }\n    }\n}\n\nfunction getRandomNumber(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}