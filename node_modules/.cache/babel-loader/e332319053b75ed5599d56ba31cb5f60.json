{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vebj\\xF8rn\\\\Documents\\\\Monday\\\\quickstart-react\\\\src\\\\App.js\";\nimport React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\nconst monday = mondaySdk();\nvar completedIDs = []; // module aliases\n\nvar Engine = Matter.Engine,\n    Render = Matter.Render,\n    World = Matter.World,\n    Bodies = Matter.Bodies,\n    Events = Matter.Events,\n    MouseConstraint = Matter.MouseConstraint,\n    Mouse = Matter.Mouse;\nvar engine, render;\nvar crates = [];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this.getContext = res => {\n      this.setState({\n        context: res.data\n      });\n      this.loadCompletedItems();\n    };\n\n    this.getSettings = res => {\n      this.setState({\n        settings: res.data\n      });\n      this.loadCompletedItems();\n    };\n\n    this.state = {\n      settings: {\n        completed_state: \"Done\",\n        completed_amount: 0\n      },\n      name: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.setupMatterJS(); //Load boards listener\n\n    monday.listen(\"context\", this.getContext); // Settings changed listener\n\n    monday.listen(\"settings\", this.getSettings);\n  }\n\n  loadCompletedItems() {\n    completedIDs = [];\n\n    for (let i in this.state.context.boardIds) {\n      monday.api(`query ($completedState: String!, $boardID: Int!) { \n                items_by_column_values (board_id:857811628, column_id: \"status\", column_value: $completedState) { name id } }`, {\n        variables: {\n          completedState: this.state.settings.completed_state,\n          boardID: 857811628\n        }\n      }).then(res => {\n        crates.forEach(crate => World.remove(engine.world, crate));\n        crates = [];\n\n        for (let i in res.data.items_by_column_values) {\n          this.createBox(res.data.items_by_column_values[i].name);\n          completedIDs[completedIDs.length] = res.data.items_by_column_values[i].id;\n        }\n\n        this.setState({\n          completed_amount: completedIDs.length\n        });\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      ref: \"launch_site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"hover_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, \"Hover\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"launchDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"launchTitle\",\n      id: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, this.state.completed_amount, \" items ready to launch!\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: launch,\n      className: \"launchButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, \"Launch now\")));\n  }\n  /** Creates a new box/crate */\n\n\n  createBox(name) {\n    let x = getRandomInt(200, 800);\n    let y = getRandomInt(50, 400);\n    let size = getRandomInt(50, 70);\n    let spriteNumber = getRandomInt(1, 8);\n    let crate = Bodies.rectangle(x, y, size, size, {\n      render: {\n        sprite: {\n          texture: \"/sprites/crates/crate_\" + spriteNumber + \".png\",\n          xScale: size / 475,\n          yScale: size / 475\n        }\n      },\n      id: name\n    });\n    World.add(engine.world, [crate]);\n    crates[crates.length] = crate;\n  }\n\n  setupMatterJS() {\n    engine = Engine.create(); // create a renderer\n\n    render = Render.create({\n      element: this.refs.launch_site,\n      engine: engine,\n      options: {\n        wireframes: false,\n        background: '#fff',\n        width: window.innerWidth,\n        height: window.innerHeight - 100\n      }\n    });\n    render.options.wireframes = false;\n    var ground = Bodies.rectangle(window.innerWidth / 2 - 250, window.innerHeight - 100, window.innerWidth + 500, 20, {\n      isStatic: true,\n      render: {\n        fillStyle: '#fff'\n      }\n    });\n    var mouse = Mouse.create(render.canvas),\n        mouseConstraint = MouseConstraint.create(engine, {\n      mouse: mouse,\n      constraint: {\n        stiffness: 0.2,\n        render: {\n          visible: false\n        }\n      }\n    });\n    World.add(engine.world, [ground, mouseConstraint]);\n    Engine.run(engine);\n    Render.run(render);\n    Events.on(engine, 'tick', () => {\n      var mousePosition = mouse.position;\n      var cratesUnderMouse = Matter.Query.point(crates, {\n        x: mousePosition.x,\n        y: mousePosition.y\n      });\n      const label = document.getElementById(\"hover_label\");\n\n      if (cratesUnderMouse.length > 0) {\n        let crate = cratesUnderMouse[0];\n        label.innerHTML = crate.id;\n        let labelHeight = label.clientHeight + 1;\n        let labelWidth = label.clientWidth + 1;\n        label.style.top = crate.position.y - 2 - labelHeight + \"px\";\n        label.style.left = crate.position.x - labelWidth / 2 + \"px\";\n        label.style.opacity = 1;\n      } else {\n        label.style.opacity = 0;\n      }\n    });\n  }\n\n}\n\nfunction launch() {\n  monday.execute(\"confirm\", {\n    message: \"Are you sure? This will launch all completed items off the earth's atmosphere and they will be gone forever!\",\n    confirmButton: \"Launch!\",\n    cancelButton: \"Cancel\",\n    excludeCancelButton: false\n  }).then(() => {\n    deleteCompleted();\n  });\n}\n\nfunction deleteCompleted() {\n  for (let i in completedIDs) {\n    let itemID = parseInt(completedIDs[i]);\n    monday.api(`mutation ($itemID: Int) { delete_item (item_id: $itemID) { id } }`, {\n      variables: {\n        itemID: itemID\n      }\n    });\n  }\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Vebj√∏rn/Documents/Monday/quickstart-react/src/App.js"],"names":["React","createElement","mondaySdk","Matter","monday","completedIDs","Engine","Render","World","Bodies","Events","MouseConstraint","Mouse","engine","render","crates","App","Component","constructor","props","getContext","res","setState","context","data","loadCompletedItems","getSettings","settings","state","completed_state","completed_amount","name","componentDidMount","setupMatterJS","listen","i","boardIds","api","variables","completedState","boardID","then","forEach","crate","remove","world","items_by_column_values","createBox","length","id","launch","x","getRandomInt","y","size","spriteNumber","rectangle","sprite","texture","xScale","yScale","add","create","element","refs","launch_site","options","wireframes","background","width","window","innerWidth","height","innerHeight","ground","isStatic","fillStyle","mouse","canvas","mouseConstraint","constraint","stiffness","visible","run","on","mousePosition","position","cratesUnderMouse","Query","point","label","document","getElementById","innerHTML","labelHeight","clientHeight","labelWidth","clientWidth","style","top","left","opacity","execute","message","confirmButton","cancelButton","excludeCancelButton","deleteCompleted","itemID","parseInt","min","max","Math","ceil","floor","random"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,MAAMC,MAAM,GAAGF,SAAS,EAAxB;AACA,IAAIG,YAAY,GAAG,EAAnB,C,CAEA;;AACA,IAAIC,MAAM,GAAGH,MAAM,CAACG,MAApB;AAAA,IACAC,MAAM,GAAGJ,MAAM,CAACI,MADhB;AAAA,IAEAC,KAAK,GAAGL,MAAM,CAACK,KAFf;AAAA,IAGAC,MAAM,GAAGN,MAAM,CAACM,MAHhB;AAAA,IAIAC,MAAM,GAAGP,MAAM,CAACO,MAJhB;AAAA,IAKAC,eAAe,GAAGR,MAAM,CAACQ,eALzB;AAAA,IAMAC,KAAK,GAAGT,MAAM,CAACS,KANf;AAQA,IAAIC,MAAJ,EACAC,MADA;AAGA,IAAIC,MAAM,GAAG,EAAb;;AAEA,MAAMC,GAAN,SAAkBhB,KAAK,CAACiB,SAAxB,CAAkC;AAC9BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAGf;;AAHe,SAwBnBC,UAxBmB,GAwBLC,GAAD,IAAS;AAClB,WAAKC,QAAL,CAAc;AAACC,QAAAA,OAAO,EAAEF,GAAG,CAACG;AAAd,OAAd;AACA,WAAKC,kBAAL;AACH,KA3BkB;;AAAA,SA6BnBC,WA7BmB,GA6BJL,GAAD,IAAS;AACnB,WAAKC,QAAL,CAAc;AAAEK,QAAAA,QAAQ,EAAEN,GAAG,CAACG;AAAhB,OAAd;AACA,WAAKC,kBAAL;AACH,KAhCkB;;AAIf,SAAKG,KAAL,GAAa;AACTD,MAAAA,QAAQ,EAAE;AACNE,QAAAA,eAAe,EAAE,MADX;AAENC,QAAAA,gBAAgB,EAAE;AAFZ,OADD;AAKTC,MAAAA,IAAI,EAAE;AALG,KAAb;AAOH;;AAEDC,EAAAA,iBAAiB,GAAG;AAEhB,SAAKC,aAAL,GAFgB,CAIhB;;AACC7B,IAAAA,MAAM,CAAC8B,MAAP,CAAc,SAAd,EAAyB,KAAKd,UAA9B,EALe,CAOhB;;AACAhB,IAAAA,MAAM,CAAC8B,MAAP,CAAc,UAAd,EAA0B,KAAKR,WAA/B;AACH;;AAYDD,EAAAA,kBAAkB,GAAG;AACjBpB,IAAAA,YAAY,GAAG,EAAf;;AACA,SAAK,IAAI8B,CAAT,IAAc,KAAKP,KAAL,CAAWL,OAAX,CAAmBa,QAAjC,EAA2C;AACvChC,MAAAA,MAAM,CAACiC,GAAP,CAAY;8HAAZ,EACoH;AAC5GC,QAAAA,SAAS,EAAE;AAACC,UAAAA,cAAc,EAAE,KAAKX,KAAL,CAAWD,QAAX,CAAoBE,eAArC;AAAsDW,UAAAA,OAAO,EAAE;AAA/D;AADiG,OADpH,EAIKC,IAJL,CAIUpB,GAAG,IAAI;AACTN,QAAAA,MAAM,CAAC2B,OAAP,CAAgBC,KAAD,IAAWnC,KAAK,CAACoC,MAAN,CAAa/B,MAAM,CAACgC,KAApB,EAA2BF,KAA3B,CAA1B;AACA5B,QAAAA,MAAM,GAAG,EAAT;;AACA,aAAK,IAAIoB,CAAT,IAAcd,GAAG,CAACG,IAAJ,CAASsB,sBAAvB,EAA+C;AAC3C,eAAKC,SAAL,CAAe1B,GAAG,CAACG,IAAJ,CAASsB,sBAAT,CAAgCX,CAAhC,EAAmCJ,IAAlD;AACA1B,UAAAA,YAAY,CAACA,YAAY,CAAC2C,MAAd,CAAZ,GAAoC3B,GAAG,CAACG,IAAJ,CAASsB,sBAAT,CAAgCX,CAAhC,EAAmCc,EAAvE;AACH;;AACD,aAAK3B,QAAL,CAAc;AAACQ,UAAAA,gBAAgB,EAAEzB,YAAY,CAAC2C;AAAhC,SAAd;AACP,OAZD;AAaH;AACJ;;AAEDlC,EAAAA,MAAM,GAAG;AACL,wBAAO;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,GAAG,EAAC,aAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACH;AAAG,MAAA,EAAE,EAAC,aAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADG,eAEH;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAG,MAAA,SAAS,EAAC,aAAb;AAA2B,MAAA,EAAE,EAAC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuC,KAAKc,KAAL,CAAWE,gBAAlD,4BADJ,eAEI;AAAQ,MAAA,OAAO,EAAEoB,MAAjB;AAAyB,MAAA,SAAS,EAAC,cAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,CAFG,CAAP;AAOH;AAED;;;AACAH,EAAAA,SAAS,CAAChB,IAAD,EAAO;AACZ,QAAIoB,CAAC,GAAGC,YAAY,CAAC,GAAD,EAAM,GAAN,CAApB;AACA,QAAIC,CAAC,GAAGD,YAAY,CAAC,EAAD,EAAK,GAAL,CAApB;AACA,QAAIE,IAAI,GAAGF,YAAY,CAAC,EAAD,EAAK,EAAL,CAAvB;AAEA,QAAIG,YAAY,GAAGH,YAAY,CAAC,CAAD,EAAI,CAAJ,CAA/B;AAEA,QAAIT,KAAK,GAAGlC,MAAM,CAAC+C,SAAP,CAAiBL,CAAjB,EAAoBE,CAApB,EAAuBC,IAAvB,EAA6BA,IAA7B,EAAmC;AAC3CxC,MAAAA,MAAM,EAAE;AACJ2C,QAAAA,MAAM,EAAE;AACJC,UAAAA,OAAO,EAAE,2BAA2BH,YAA3B,GAA0C,MAD/C;AAEJI,UAAAA,MAAM,EAAEL,IAAI,GAAG,GAFX;AAGJM,UAAAA,MAAM,EAAEN,IAAI,GAAG;AAHX;AADJ,OADmC;AAM3CL,MAAAA,EAAE,EAAElB;AANuC,KAAnC,CAAZ;AASAvB,IAAAA,KAAK,CAACqD,GAAN,CAAUhD,MAAM,CAACgC,KAAjB,EAAwB,CAACF,KAAD,CAAxB;AACA5B,IAAAA,MAAM,CAACA,MAAM,CAACiC,MAAR,CAAN,GAAwBL,KAAxB;AACH;;AAEDV,EAAAA,aAAa,GAAG;AACZpB,IAAAA,MAAM,GAAGP,MAAM,CAACwD,MAAP,EAAT,CADY,CAGZ;;AACAhD,IAAAA,MAAM,GAAGP,MAAM,CAACuD,MAAP,CAAc;AACnBC,MAAAA,OAAO,EAAE,KAAKC,IAAL,CAAUC,WADA;AAEnBpD,MAAAA,MAAM,EAAEA,MAFW;AAGnBqD,MAAAA,OAAO,EAAE;AACLC,QAAAA,UAAU,EAAE,KADP;AAELC,QAAAA,UAAU,EAAE,MAFP;AAGLC,QAAAA,KAAK,EAAEC,MAAM,CAACC,UAHT;AAILC,QAAAA,MAAM,EAAEF,MAAM,CAACG,WAAP,GAAqB;AAJxB;AAHU,KAAd,CAAT;AAUA3D,IAAAA,MAAM,CAACoD,OAAP,CAAeC,UAAf,GAA4B,KAA5B;AAEA,QAAIO,MAAM,GAAGjE,MAAM,CAAC+C,SAAP,CAAiBc,MAAM,CAACC,UAAP,GAAoB,CAApB,GAAwB,GAAzC,EAA8CD,MAAM,CAACG,WAAP,GAAqB,GAAnE,EAAwEH,MAAM,CAACC,UAAP,GAAoB,GAA5F,EAAiG,EAAjG,EAAqG;AAC9GI,MAAAA,QAAQ,EAAE,IADoG;AAE9G7D,MAAAA,MAAM,EAAE;AAAE8D,QAAAA,SAAS,EAAE;AAAb;AAFsG,KAArG,CAAb;AAKA,QAAIC,KAAK,GAAGjE,KAAK,CAACkD,MAAN,CAAahD,MAAM,CAACgE,MAApB,CAAZ;AAAA,QACAC,eAAe,GAAGpE,eAAe,CAACmD,MAAhB,CAAuBjD,MAAvB,EAA+B;AAC7CgE,MAAAA,KAAK,EAAEA,KADsC;AAE7CG,MAAAA,UAAU,EAAE;AACRC,QAAAA,SAAS,EAAE,GADH;AAERnE,QAAAA,MAAM,EAAE;AAAEoE,UAAAA,OAAO,EAAE;AAAX;AAFA;AAFiC,KAA/B,CADlB;AASA1E,IAAAA,KAAK,CAACqD,GAAN,CAAUhD,MAAM,CAACgC,KAAjB,EAAwB,CAAC6B,MAAD,EAASK,eAAT,CAAxB;AACAzE,IAAAA,MAAM,CAAC6E,GAAP,CAAWtE,MAAX;AACAN,IAAAA,MAAM,CAAC4E,GAAP,CAAWrE,MAAX;AAEAJ,IAAAA,MAAM,CAAC0E,EAAP,CAAUvE,MAAV,EAAkB,MAAlB,EAA0B,MAAM;AAC5B,UAAIwE,aAAa,GAAGR,KAAK,CAACS,QAA1B;AACA,UAAIC,gBAAgB,GAAGpF,MAAM,CAACqF,KAAP,CAAaC,KAAb,CAAmB1E,MAAnB,EAA2B;AAACoC,QAAAA,CAAC,EAAEkC,aAAa,CAAClC,CAAlB;AAAqBE,QAAAA,CAAC,EAAEgC,aAAa,CAAChC;AAAtC,OAA3B,CAAvB;AAEA,YAAMqC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAd;;AACA,UAAIL,gBAAgB,CAACvC,MAAjB,GAA0B,CAA9B,EAAiC;AAC7B,YAAIL,KAAK,GAAG4C,gBAAgB,CAAC,CAAD,CAA5B;AACAG,QAAAA,KAAK,CAACG,SAAN,GAAkBlD,KAAK,CAACM,EAAxB;AACA,YAAI6C,WAAW,GAAIJ,KAAK,CAACK,YAAN,GAAqB,CAAxC;AACA,YAAIC,UAAU,GAAIN,KAAK,CAACO,WAAN,GAAoB,CAAtC;AACAP,QAAAA,KAAK,CAACQ,KAAN,CAAYC,GAAZ,GAAkBxD,KAAK,CAAC2C,QAAN,CAAejC,CAAf,GAAmB,CAAnB,GAAuByC,WAAvB,GAAqC,IAAvD;AACAJ,QAAAA,KAAK,CAACQ,KAAN,CAAYE,IAAZ,GAAmBzD,KAAK,CAAC2C,QAAN,CAAenC,CAAf,GAAmB6C,UAAU,GAAG,CAAhC,GAAoC,IAAvD;AACAN,QAAAA,KAAK,CAACQ,KAAN,CAAYG,OAAZ,GAAsB,CAAtB;AACH,OARD,MAQO;AACHX,QAAAA,KAAK,CAACQ,KAAN,CAAYG,OAAZ,GAAsB,CAAtB;AACH;AACJ,KAhBD;AAiBH;;AAxI6B;;AA2IlC,SAASnD,MAAT,GAAkB;AACd9C,EAAAA,MAAM,CAACkG,OAAP,CAAe,SAAf,EAA0B;AACtBC,IAAAA,OAAO,EAAE,8GADa;AAEtBC,IAAAA,aAAa,EAAE,SAFO;AAGtBC,IAAAA,YAAY,EAAE,QAHQ;AAItBC,IAAAA,mBAAmB,EAAE;AAJC,GAA1B,EAKIjE,IALJ,CAKS,MAAM;AACVkE,IAAAA,eAAe;AAClB,GAPF;AAQH;;AAED,SAASA,eAAT,GAA2B;AACvB,OAAK,IAAIxE,CAAT,IAAc9B,YAAd,EAA4B;AACxB,QAAIuG,MAAM,GAAGC,QAAQ,CAACxG,YAAY,CAAC8B,CAAD,CAAb,CAArB;AACA/B,IAAAA,MAAM,CAACiC,GAAP,CAAY,mEAAZ,EAAgF;AAC5EC,MAAAA,SAAS,EAAE;AAACsE,QAAAA,MAAM,EAAEA;AAAT;AADiE,KAAhF;AAGH;AACJ;;AAED,SAASxD,YAAT,CAAsB0D,GAAtB,EAA2BC,GAA3B,EAAgC;AAC5BD,EAAAA,GAAG,GAAGE,IAAI,CAACC,IAAL,CAAUH,GAAV,CAAN;AACAC,EAAAA,GAAG,GAAGC,IAAI,CAACE,KAAL,CAAWH,GAAX,CAAN;AACA,SAAOC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,MAAiBJ,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAArD;AACH;;AAED,eAAe9F,GAAf","sourcesContent":["import React, { createElement } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Matter from \"matter-js\";\n\nconst monday = mondaySdk();\nvar completedIDs = [];\n\n// module aliases\nvar Engine = Matter.Engine,\nRender = Matter.Render,\nWorld = Matter.World,\nBodies = Matter.Bodies,\nEvents = Matter.Events,\nMouseConstraint = Matter.MouseConstraint,\nMouse = Matter.Mouse;\n\nvar engine,\nrender;\n\nvar crates = [];\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Default state\n        this.state = {\n            settings: {\n                completed_state: \"Done\",\n                completed_amount: 0\n            },\n            name: \"\",\n        };\n    }\n\n    componentDidMount() {\n        \n        this.setupMatterJS();\n\n        //Load boards listener\n         monday.listen(\"context\", this.getContext)\n\n        // Settings changed listener\n        monday.listen(\"settings\", this.getSettings);\n    }\n\n    getContext = (res) => {\n        this.setState({context: res.data});\n        this.loadCompletedItems();\n    }\n\n    getSettings = (res) => {\n        this.setState({ settings: res.data });\n        this.loadCompletedItems();\n    }\n\n    loadCompletedItems() {\n        completedIDs = [];\n        for (let i in this.state.context.boardIds) {\n            monday.api(`query ($completedState: String!, $boardID: Int!) { \n                items_by_column_values (board_id:857811628, column_id: \"status\", column_value: $completedState) { name id } }`, {\n                    variables: {completedState: this.state.settings.completed_state, boardID: 857811628}\n                })\n                .then(res => {\n                    crates.forEach((crate) => World.remove(engine.world, crate));\n                    crates = [];\n                    for (let i in res.data.items_by_column_values) {\n                        this.createBox(res.data.items_by_column_values[i].name);\n                        completedIDs[completedIDs.length] = res.data.items_by_column_values[i].id;\n                    }\n                    this.setState({completed_amount: completedIDs.length})\n            });\n        }\n    }\n\n    render() {\n        return <div className=\"App\" ref=\"launch_site\">\n            <p id=\"hover_label\">Hover</p>\n            <div className=\"launchDiv\">\n                <p className=\"launchTitle\" id=\"title\">{this.state.completed_amount} items ready to launch!</p>\n                <button onClick={launch} className=\"launchButton\">Launch now</button>\n            </div>\n        </div>;\n    }\n\n    /** Creates a new box/crate */\n    createBox(name) {\n        let x = getRandomInt(200, 800);\n        let y = getRandomInt(50, 400);\n        let size = getRandomInt(50, 70);\n\n        let spriteNumber = getRandomInt(1, 8);\n\n        let crate = Bodies.rectangle(x, y, size, size, {\n            render: {\n                sprite: {\n                    texture: \"/sprites/crates/crate_\" + spriteNumber + \".png\",\n                    xScale: size / 475,\n                    yScale: size / 475 } },\n            id: name\n        });\n            \n        World.add(engine.world, [crate]);\n        crates[crates.length] = crate;\n    }\n\n    setupMatterJS() {\n        engine = Engine.create();\n\n        // create a renderer\n        render = Render.create({\n            element: this.refs.launch_site,\n            engine: engine,\n            options: {\n                wireframes: false,\n                background: '#fff',\n                width: window.innerWidth,\n                height: window.innerHeight - 100\n            }\n        });\n        render.options.wireframes = false;\n\n        var ground = Bodies.rectangle(window.innerWidth / 2 - 250, window.innerHeight - 100, window.innerWidth + 500, 20, { \n            isStatic: true,\n            render: { fillStyle: '#fff' }\n        });\n\n        var mouse = Mouse.create(render.canvas),\n        mouseConstraint = MouseConstraint.create(engine, {\n            mouse: mouse,\n            constraint: {\n                stiffness: 0.2,\n                render: { visible: false }\n            }\n        });\n\n        World.add(engine.world, [ground, mouseConstraint]);\n        Engine.run(engine);\n        Render.run(render);\n    \n        Events.on(engine, 'tick', () => {\n            var mousePosition = mouse.position;\n            var cratesUnderMouse = Matter.Query.point(crates, {x: mousePosition.x, y: mousePosition.y});\n            \n            const label = document.getElementById(\"hover_label\");\n            if (cratesUnderMouse.length > 0) {\n                let crate = cratesUnderMouse[0];\n                label.innerHTML = crate.id;\n                let labelHeight = (label.clientHeight + 1);\n                let labelWidth = (label.clientWidth + 1);\n                label.style.top = crate.position.y - 2 - labelHeight + \"px\";\n                label.style.left = crate.position.x - labelWidth / 2 + \"px\";\n                label.style.opacity = 1;\n            } else {\n                label.style.opacity = 0;\n            }\n        });\n    }\n}\n\nfunction launch() {\n    monday.execute(\"confirm\", {\n        message: \"Are you sure? This will launch all completed items off the earth's atmosphere and they will be gone forever!\", \n        confirmButton: \"Launch!\", \n        cancelButton: \"Cancel\", \n        excludeCancelButton: false\n     }).then(() => {\n         deleteCompleted();\n     });\n}\n    \nfunction deleteCompleted() {\n    for (let i in completedIDs) {\n        let itemID = parseInt(completedIDs[i]);\n        monday.api(`mutation ($itemID: Int) { delete_item (item_id: $itemID) { id } }`, {\n            variables: {itemID: itemID } }\n        );\n    }\n}\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}